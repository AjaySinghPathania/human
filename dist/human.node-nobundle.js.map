{
  "version": 3,
  "sources": ["../src/facemesh/blazeface.js", "../src/facemesh/keypoints.js", "../src/facemesh/box.js", "../src/facemesh/util.js", "../src/facemesh/pipeline.js", "../src/facemesh/uvcoords.js", "../src/facemesh/triangulation.js", "../src/facemesh/facemesh.js", "../src/ssrnet/ssrnet.js", "../src/emotion/emotion.js", "../src/posenet/modelBase.js", "../src/posenet/modelMobileNet.js", "../src/posenet/heapSort.js", "../src/posenet/buildParts.js", "../src/posenet/keypoints.js", "../src/posenet/vectors.js", "../src/posenet/decodePose.js", "../src/posenet/decodeMultiple.js", "../src/posenet/util.js", "../src/posenet/modelPoseNet.js", "../src/posenet/posenet.js", "../src/handpose/box.js", "../src/handpose/handdetector.js", "../src/handpose/keypoints.js", "../src/handpose/util.js", "../src/handpose/pipeline.js", "../src/handpose/handpose.js", "../src/imagefx.js", "../config.js", "../src/human.js", "../src/human.js"],
  "sourcesContent": ["const tf = require('@tensorflow/tfjs');\n\nconst NUM_LANDMARKS = 6;\n\nfunction generateAnchors(inputSize) {\n  const spec = { strides: [inputSize / 16, inputSize / 8], anchors: [2, 6] };\n  const anchors = [];\n  for (let i = 0; i < spec.strides.length; i++) {\n    const stride = spec.strides[i];\n    const gridRows = Math.floor((inputSize + stride - 1) / stride);\n    const gridCols = Math.floor((inputSize + stride - 1) / stride);\n    const anchorsNum = spec.anchors[i];\n    for (let gridY = 0; gridY < gridRows; gridY++) {\n      const anchorY = stride * (gridY + 0.5);\n      for (let gridX = 0; gridX < gridCols; gridX++) {\n        const anchorX = stride * (gridX + 0.5);\n        for (let n = 0; n < anchorsNum; n++) {\n          anchors.push([anchorX, anchorY]);\n        }\n      }\n    }\n  }\n  return anchors;\n}\n\nconst disposeBox = (box) => {\n  box.startEndTensor.dispose();\n  box.startPoint.dispose();\n  box.endPoint.dispose();\n};\n\nconst createBox = (startEndTensor) => ({\n  startEndTensor,\n  startPoint: tf.slice(startEndTensor, [0, 0], [-1, 2]),\n  endPoint: tf.slice(startEndTensor, [0, 2], [-1, 2]),\n});\n\nconst scaleBox = (box, factors) => {\n  const starts = tf.mul(box.startPoint, factors);\n  const ends = tf.mul(box.endPoint, factors);\n  const newCoordinates = tf.concat2d([starts, ends], 1);\n  return createBox(newCoordinates);\n};\n\nfunction decodeBounds(boxOutputs, anchors, inputSize) {\n  const boxStarts = tf.slice(boxOutputs, [0, 1], [-1, 2]);\n  const centers = tf.add(boxStarts, anchors);\n  const boxSizes = tf.slice(boxOutputs, [0, 3], [-1, 2]);\n  const boxSizesNormalized = tf.div(boxSizes, inputSize);\n  const centersNormalized = tf.div(centers, inputSize);\n  const halfBoxSize = tf.div(boxSizesNormalized, 2);\n  const starts = tf.sub(centersNormalized, halfBoxSize);\n  const ends = tf.add(centersNormalized, halfBoxSize);\n  const startNormalized = tf.mul(starts, inputSize);\n  const endNormalized = tf.mul(ends, inputSize);\n  const concatAxis = 1;\n  return tf.concat2d([startNormalized, endNormalized], concatAxis);\n}\n\nfunction scaleBoxFromPrediction(face, scaleFactor) {\n  return tf.tidy(() => {\n    const box = face['box'] ? face['box'] : face;\n    return scaleBox(box, scaleFactor).startEndTensor.squeeze();\n  });\n}\n\nclass BlazeFaceModel {\n  constructor(model, config) {\n    this.blazeFaceModel = model;\n    this.width = config.detector.inputSize;\n    this.height = config.detector.inputSize;\n    this.maxFaces = config.detector.maxFaces;\n    this.anchorsData = generateAnchors(config.detector.inputSize);\n    this.anchors = tf.tensor2d(this.anchorsData);\n    this.inputSize = tf.tensor1d([this.width, this.height]);\n    this.iouThreshold = config.detector.iouThreshold;\n    this.scaleFaces = 0.8;\n    this.scoreThreshold = config.detector.scoreThreshold;\n  }\n\n  // toto blazeface leaks two tensors per run\n  async getBoundingBoxes(inputImage) {\n    // sanity check on input\n    if ((!inputImage) || (inputImage.isDisposedInternal) || (inputImage.shape.length !== 4) || (inputImage.shape[1] < 1) || (inputImage.shape[2] < 1)) return null;\n    const [detectedOutputs, boxes, scores] = tf.tidy(() => {\n      const resizedImage = inputImage.resizeBilinear([this.width, this.height]);\n      const normalizedImage = tf.mul(tf.sub(resizedImage.div(255), 0.5), 2);\n      const batchedPrediction = this.blazeFaceModel.predict(normalizedImage);\n      let prediction;\n      // are we using tfhub or pinto converted model?\n      if (Array.isArray(batchedPrediction)) {\n        const sorted = batchedPrediction.sort((a, b) => a.size - b.size);\n        const concat384 = tf.concat([sorted[0], sorted[2]], 2); // dim: 384, 1 + 16\n        const concat512 = tf.concat([sorted[1], sorted[3]], 2); // dim: 512, 1 + 16\n        const concat = tf.concat([concat512, concat384], 1);\n        prediction = concat.squeeze(0);\n      } else {\n        prediction = batchedPrediction.squeeze(); // when using tfhub model\n      }\n      const decodedBounds = decodeBounds(prediction, this.anchors, this.inputSize);\n      const logits = tf.slice(prediction, [0, 0], [-1, 1]);\n      const scoresOut = tf.sigmoid(logits).squeeze();\n      return [prediction, decodedBounds, scoresOut];\n    });\n    const boxIndicesTensor = await tf.image.nonMaxSuppressionAsync(boxes, scores, this.maxFaces, this.iouThreshold, this.scoreThreshold);\n    const boxIndices = await boxIndicesTensor.array();\n    boxIndicesTensor.dispose();\n    const boundingBoxesMap = boxIndices.map((boxIndex) => tf.slice(boxes, [boxIndex, 0], [1, -1]));\n    const boundingBoxes = await Promise.all(boundingBoxesMap.map(async (boundingBox) => {\n      const vals = await boundingBox.array();\n      boundingBox.dispose();\n      return vals;\n    }));\n    const annotatedBoxes = [];\n    for (let i = 0; i < boundingBoxes.length; i++) {\n      const boundingBox = boundingBoxes[i];\n      const box = createBox(boundingBox);\n      const boxIndex = boxIndices[i];\n      const anchor = this.anchorsData[boxIndex];\n      const sliced = tf.slice(detectedOutputs, [boxIndex, NUM_LANDMARKS - 1], [1, -1]);\n      const squeezed = sliced.squeeze();\n      const landmarks = squeezed.reshape([NUM_LANDMARKS, -1]);\n      /*\n      const landmarks = tf\n        .slice(detectedOutputs, [boxIndex, NUM_LANDMARKS - 1], [1, -1])\n        .squeeze()\n        .reshape([NUM_LANDMARKS, -1]);\n      */\n      const probability = tf.slice(scores, [boxIndex], [1]);\n      const annotatedBox = { box, landmarks, probability, anchor };\n      annotatedBoxes.push(annotatedBox);\n      sliced.dispose();\n      squeezed.dispose();\n      // landmarks.dispose();\n    }\n    detectedOutputs.dispose();\n    boxes.dispose();\n    scores.dispose();\n    detectedOutputs.dispose();\n    return {\n      boxes: annotatedBoxes,\n      scaleFactor: [inputImage.shape[2] / this.width, inputImage.shape[1] / this.height],\n    };\n  }\n\n  async estimateFaces(input) {\n    const { boxes, scaleFactor } = await this.getBoundingBoxes(input);\n    return Promise.all(boxes.map(async (face) => {\n      const scaledBox = scaleBoxFromPrediction(face, scaleFactor);\n      const [landmarkData, boxData, probabilityData] = await Promise.all([face.landmarks, scaledBox, face.probability].map(async (d) => d.array()));\n      const anchor = face.anchor;\n      const [scaleFactorX, scaleFactorY] = scaleFactor;\n      const scaledLandmarks = landmarkData\n        .map((landmark) => ([\n          (landmark[0] + anchor[0]) * scaleFactorX,\n          (landmark[1] + anchor[1]) * scaleFactorY,\n        ]));\n      const normalizedFace = {\n        topLeft: boxData.slice(0, 2),\n        bottomRight: boxData.slice(2),\n        landmarks: scaledLandmarks,\n        probability: probabilityData,\n      };\n      disposeBox(face.box);\n      face.landmarks.dispose();\n      face.probability.dispose();\n      scaledBox.dispose();\n      return normalizedFace;\n    }));\n  }\n}\n\nasync function load(config) {\n  const blazeface = await tf.loadGraphModel(config.detector.modelPath, { fromTFHub: config.detector.modelPath.includes('tfhub.dev') });\n  const model = new BlazeFaceModel(blazeface, config);\n  return model;\n}\n\nexports.load = load;\nexports.BlazeFaceModel = BlazeFaceModel;\nexports.disposeBox = disposeBox;\n", "exports.MESH_ANNOTATIONS = {\n  silhouette: [\n    10, 338, 297, 332, 284, 251, 389, 356, 454, 323, 361, 288,\n    397, 365, 379, 378, 400, 377, 152, 148, 176, 149, 150, 136,\n    172, 58, 132, 93, 234, 127, 162, 21, 54, 103, 67, 109,\n  ],\n  lipsUpperOuter: [61, 185, 40, 39, 37, 0, 267, 269, 270, 409, 291],\n  lipsLowerOuter: [146, 91, 181, 84, 17, 314, 405, 321, 375, 291],\n  lipsUpperInner: [78, 191, 80, 81, 82, 13, 312, 311, 310, 415, 308],\n  lipsLowerInner: [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308],\n  rightEyeUpper0: [246, 161, 160, 159, 158, 157, 173],\n  rightEyeLower0: [33, 7, 163, 144, 145, 153, 154, 155, 133],\n  rightEyeUpper1: [247, 30, 29, 27, 28, 56, 190],\n  rightEyeLower1: [130, 25, 110, 24, 23, 22, 26, 112, 243],\n  rightEyeUpper2: [113, 225, 224, 223, 222, 221, 189],\n  rightEyeLower2: [226, 31, 228, 229, 230, 231, 232, 233, 244],\n  rightEyeLower3: [143, 111, 117, 118, 119, 120, 121, 128, 245],\n  rightEyebrowUpper: [156, 70, 63, 105, 66, 107, 55, 193],\n  rightEyebrowLower: [35, 124, 46, 53, 52, 65],\n  rightEyeIris: [473, 474, 475, 476, 477],\n  leftEyeUpper0: [466, 388, 387, 386, 385, 384, 398],\n  leftEyeLower0: [263, 249, 390, 373, 374, 380, 381, 382, 362],\n  leftEyeUpper1: [467, 260, 259, 257, 258, 286, 414],\n  leftEyeLower1: [359, 255, 339, 254, 253, 252, 256, 341, 463],\n  leftEyeUpper2: [342, 445, 444, 443, 442, 441, 413],\n  leftEyeLower2: [446, 261, 448, 449, 450, 451, 452, 453, 464],\n  leftEyeLower3: [372, 340, 346, 347, 348, 349, 350, 357, 465],\n  leftEyebrowUpper: [383, 300, 293, 334, 296, 336, 285, 417],\n  leftEyebrowLower: [265, 353, 276, 283, 282, 295],\n  leftEyeIris: [468, 469, 470, 471, 472],\n  midwayBetweenEyes: [168],\n  noseTip: [1],\n  noseBottom: [2],\n  noseRightCorner: [98],\n  noseLeftCorner: [327],\n  rightCheek: [205],\n  leftCheek: [425],\n};\nexports.MESH_TO_IRIS_INDICES_MAP = [ // A mapping from facemesh model keypoints to iris model keypoints.\n  { key: 'EyeUpper0', indices: [9, 10, 11, 12, 13, 14, 15] },\n  { key: 'EyeUpper1', indices: [25, 26, 27, 28, 29, 30, 31] },\n  { key: 'EyeUpper2', indices: [41, 42, 43, 44, 45, 46, 47] },\n  { key: 'EyeLower0', indices: [0, 1, 2, 3, 4, 5, 6, 7, 8] },\n  { key: 'EyeLower1', indices: [16, 17, 18, 19, 20, 21, 22, 23, 24] },\n  { key: 'EyeLower2', indices: [32, 33, 34, 35, 36, 37, 38, 39, 40] },\n  { key: 'EyeLower3', indices: [54, 55, 56, 57, 58, 59, 60, 61, 62] },\n  { key: 'EyebrowUpper', indices: [63, 64, 65, 66, 67, 68, 69, 70] },\n  { key: 'EyebrowLower', indices: [48, 49, 50, 51, 52, 53] },\n];\n", "const tf = require('@tensorflow/tfjs');\n\nfunction scaleBoxCoordinates(box, factor) {\n  const startPoint = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]];\n  const endPoint = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]];\n  return { startPoint, endPoint };\n}\nexports.scaleBoxCoordinates = scaleBoxCoordinates;\nfunction getBoxSize(box) {\n  return [\n    Math.abs(box.endPoint[0] - box.startPoint[0]),\n    Math.abs(box.endPoint[1] - box.startPoint[1]),\n  ];\n}\nexports.getBoxSize = getBoxSize;\nfunction getBoxCenter(box) {\n  return [\n    box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2,\n    box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2,\n  ];\n}\nexports.getBoxCenter = getBoxCenter;\nfunction cutBoxFromImageAndResize(box, image, cropSize) {\n  const h = image.shape[1];\n  const w = image.shape[2];\n  const boxes = [[\n    box.startPoint[1] / h, box.startPoint[0] / w, box.endPoint[1] / h,\n    box.endPoint[0] / w,\n  ]];\n  return tf.image.cropAndResize(image, boxes, [0], cropSize);\n}\nexports.cutBoxFromImageAndResize = cutBoxFromImageAndResize;\nfunction enlargeBox(box, factor = 1.5) {\n  const center = getBoxCenter(box);\n  const size = getBoxSize(box);\n  const newHalfSize = [factor * size[0] / 2, factor * size[1] / 2];\n  const startPoint = [center[0] - newHalfSize[0], center[1] - newHalfSize[1]];\n  const endPoint = [center[0] + newHalfSize[0], center[1] + newHalfSize[1]];\n  return { startPoint, endPoint, landmarks: box.landmarks };\n}\nexports.enlargeBox = enlargeBox;\nfunction squarifyBox(box) {\n  const centers = getBoxCenter(box);\n  const size = getBoxSize(box);\n  const maxEdge = Math.max(...size);\n  const halfSize = maxEdge / 2;\n  const startPoint = [centers[0] - halfSize, centers[1] - halfSize];\n  const endPoint = [centers[0] + halfSize, centers[1] + halfSize];\n  return { startPoint, endPoint, landmarks: box.landmarks };\n}\nexports.squarifyBox = squarifyBox;\n", "exports.IDENTITY_MATRIX = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n/**\n * Normalizes the provided angle to the range -pi to pi.\n * @param angle The angle in radians to be normalized.\n */\nfunction normalizeRadians(angle) {\n  return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));\n}\nexports.normalizeRadians = normalizeRadians;\n/**\n * Computes the angle of rotation between two anchor points.\n * @param point1 First anchor point\n * @param point2 Second anchor point\n */\nfunction computeRotation(point1, point2) {\n  const radians = Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]);\n  return normalizeRadians(radians);\n}\nexports.computeRotation = computeRotation;\nfunction radToDegrees(rad) {\n  return rad * 180 / Math.PI;\n}\nexports.radToDegrees = radToDegrees;\nfunction buildTranslationMatrix(x, y) {\n  return [[1, 0, x], [0, 1, y], [0, 0, 1]];\n}\nfunction dot(v1, v2) {\n  let product = 0;\n  for (let i = 0; i < v1.length; i++) {\n    product += v1[i] * v2[i];\n  }\n  return product;\n}\nexports.dot = dot;\nfunction getColumnFrom2DArr(arr, columnIndex) {\n  const column = [];\n  for (let i = 0; i < arr.length; i++) {\n    column.push(arr[i][columnIndex]);\n  }\n  return column;\n}\nexports.getColumnFrom2DArr = getColumnFrom2DArr;\nfunction multiplyTransformMatrices(mat1, mat2) {\n  const product = [];\n  const size = mat1.length;\n  for (let row = 0; row < size; row++) {\n    product.push([]);\n    for (let col = 0; col < size; col++) {\n      product[row].push(dot(mat1[row], getColumnFrom2DArr(mat2, col)));\n    }\n  }\n  return product;\n}\nfunction buildRotationMatrix(rotation, center) {\n  const cosA = Math.cos(rotation);\n  const sinA = Math.sin(rotation);\n  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];\n  const translationMatrix = buildTranslationMatrix(center[0], center[1]);\n  const translationTimesRotation = multiplyTransformMatrices(translationMatrix, rotationMatrix);\n  const negativeTranslationMatrix = buildTranslationMatrix(-center[0], -center[1]);\n  return multiplyTransformMatrices(translationTimesRotation, negativeTranslationMatrix);\n}\nexports.buildRotationMatrix = buildRotationMatrix;\nfunction invertTransformMatrix(matrix) {\n  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];\n  const translationComponent = [matrix[0][2], matrix[1][2]];\n  const invertedTranslation = [\n    -dot(rotationComponent[0], translationComponent),\n    -dot(rotationComponent[1], translationComponent),\n  ];\n  return [\n    rotationComponent[0].concat(invertedTranslation[0]),\n    rotationComponent[1].concat(invertedTranslation[1]),\n    [0, 0, 1],\n  ];\n}\nexports.invertTransformMatrix = invertTransformMatrix;\nfunction rotatePoint(homogeneousCoordinate, rotationMatrix) {\n  return [\n    dot(homogeneousCoordinate, rotationMatrix[0]),\n    dot(homogeneousCoordinate, rotationMatrix[1]),\n  ];\n}\nexports.rotatePoint = rotatePoint;\nfunction xyDistanceBetweenPoints(a, b) {\n  return Math.sqrt(((a[0] - b[0]) ** 2) + ((a[1] - b[1]) ** 2));\n}\nexports.xyDistanceBetweenPoints = xyDistanceBetweenPoints;\n", "/* eslint-disable class-methods-use-this */\nconst tf = require('@tensorflow/tfjs');\nconst bounding = require('./box');\nconst keypoints = require('./keypoints');\nconst util = require('./util');\n\nconst LANDMARKS_COUNT = 468;\nconst UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD = 0.25;\nconst MESH_MOUTH_INDEX = 13;\nconst MESH_KEYPOINTS_LINE_OF_SYMMETRY_INDICES = [MESH_MOUTH_INDEX, keypoints.MESH_ANNOTATIONS['midwayBetweenEyes'][0]];\nconst BLAZEFACE_MOUTH_INDEX = 3;\nconst BLAZEFACE_NOSE_INDEX = 2;\nconst BLAZEFACE_KEYPOINTS_LINE_OF_SYMMETRY_INDICES = [BLAZEFACE_MOUTH_INDEX, BLAZEFACE_NOSE_INDEX];\nconst LEFT_EYE_OUTLINE = keypoints.MESH_ANNOTATIONS['leftEyeLower0'];\nconst LEFT_EYE_BOUNDS = [LEFT_EYE_OUTLINE[0], LEFT_EYE_OUTLINE[LEFT_EYE_OUTLINE.length - 1]];\nconst RIGHT_EYE_OUTLINE = keypoints.MESH_ANNOTATIONS['rightEyeLower0'];\nconst RIGHT_EYE_BOUNDS = [RIGHT_EYE_OUTLINE[0], RIGHT_EYE_OUTLINE[RIGHT_EYE_OUTLINE.length - 1]];\nconst IRIS_UPPER_CENTER_INDEX = 3;\nconst IRIS_LOWER_CENTER_INDEX = 4;\nconst IRIS_IRIS_INDEX = 71;\nconst IRIS_NUM_COORDINATES = 76;\n\n// Replace the raw coordinates returned by facemesh with refined iris model coordinates. Update the z coordinate to be an average of the original and the new. This produces the best visual effect.\nfunction replaceRawCoordinates(rawCoords, newCoords, prefix, keys) {\n  for (let i = 0; i < keypoints.MESH_TO_IRIS_INDICES_MAP.length; i++) {\n    const { key, indices } = keypoints.MESH_TO_IRIS_INDICES_MAP[i];\n    const originalIndices = keypoints.MESH_ANNOTATIONS[`${prefix}${key}`];\n    const shouldReplaceAllKeys = keys == null;\n    if (shouldReplaceAllKeys || keys.includes(key)) {\n      for (let j = 0; j < indices.length; j++) {\n        const index = indices[j];\n        rawCoords[originalIndices[j]] = [\n          newCoords[index][0], newCoords[index][1],\n          (newCoords[index][2] + rawCoords[originalIndices[j]][2]) / 2,\n        ];\n      }\n    }\n  }\n}\n// The Pipeline coordinates between the bounding box and skeleton models.\nclass Pipeline {\n  constructor(boundingBoxDetector, meshDetector, irisModel, config) {\n    // An array of facial bounding boxes.\n    this.regionsOfInterest = [];\n    this.runsWithoutFaceDetector = 0;\n    this.boundingBoxDetector = boundingBoxDetector;\n    this.meshDetector = meshDetector;\n    this.irisModel = irisModel;\n    this.meshWidth = config.mesh.inputSize;\n    this.meshHeight = config.mesh.inputSize;\n    this.irisSize = config.iris.inputSize;\n    this.irisEnlarge = config.iris.enlargeFactor;\n  }\n\n  transformRawCoords(rawCoords, box, angle, rotationMatrix) {\n    const boxSize = bounding.getBoxSize({ startPoint: box.startPoint, endPoint: box.endPoint });\n    const scaleFactor = [boxSize[0] / this.meshWidth, boxSize[1] / this.meshHeight];\n    const coordsScaled = rawCoords.map((coord) => ([\n      scaleFactor[0] * (coord[0] - this.meshWidth / 2),\n      scaleFactor[1] * (coord[1] - this.meshHeight / 2), coord[2],\n    ]));\n    const coordsRotationMatrix = util.buildRotationMatrix(angle, [0, 0]);\n    const coordsRotated = coordsScaled.map((coord) => ([...util.rotatePoint(coord, coordsRotationMatrix), coord[2]]));\n    const inverseRotationMatrix = util.invertTransformMatrix(rotationMatrix);\n    const boxCenter = [...bounding.getBoxCenter({ startPoint: box.startPoint, endPoint: box.endPoint }), 1];\n    const originalBoxCenter = [\n      util.dot(boxCenter, inverseRotationMatrix[0]),\n      util.dot(boxCenter, inverseRotationMatrix[1]),\n    ];\n    return coordsRotated.map((coord) => ([\n      coord[0] + originalBoxCenter[0],\n      coord[1] + originalBoxCenter[1], coord[2],\n    ]));\n  }\n\n  getLeftToRightEyeDepthDifference(rawCoords) {\n    const leftEyeZ = rawCoords[LEFT_EYE_BOUNDS[0]][2];\n    const rightEyeZ = rawCoords[RIGHT_EYE_BOUNDS[0]][2];\n    return leftEyeZ - rightEyeZ;\n  }\n\n  // Returns a box describing a cropped region around the eye fit for passing to the iris model.\n  getEyeBox(rawCoords, face, eyeInnerCornerIndex, eyeOuterCornerIndex, flip = false) {\n    const box = bounding.squarifyBox(bounding.enlargeBox(this.calculateLandmarksBoundingBox([rawCoords[eyeInnerCornerIndex], rawCoords[eyeOuterCornerIndex]]), this.irisEnlarge));\n    const boxSize = bounding.getBoxSize(box);\n    let crop = tf.image.cropAndResize(face, [[\n      box.startPoint[1] / this.meshHeight,\n      box.startPoint[0] / this.meshWidth, box.endPoint[1] / this.meshHeight,\n      box.endPoint[0] / this.meshWidth,\n    ]], [0], [this.irisSize, this.irisSize]);\n    if (flip) {\n      crop = tf.image.flipLeftRight(crop);\n    }\n    return { box, boxSize, crop };\n  }\n\n  // Given a cropped image of an eye, returns the coordinates of the contours surrounding the eye and the iris.\n  getEyeCoords(eyeData, eyeBox, eyeBoxSize, flip = false) {\n    const eyeRawCoords = [];\n    for (let i = 0; i < IRIS_NUM_COORDINATES; i++) {\n      const x = eyeData[i * 3];\n      const y = eyeData[i * 3 + 1];\n      const z = eyeData[i * 3 + 2];\n      eyeRawCoords.push([\n        (flip\n          ? (1 - (x / this.irisSize))\n          : (x / this.irisSize)) * eyeBoxSize[0] + eyeBox.startPoint[0],\n        (y / this.irisSize) * eyeBoxSize[1] + eyeBox.startPoint[1], z,\n      ]);\n    }\n    return { rawCoords: eyeRawCoords, iris: eyeRawCoords.slice(IRIS_IRIS_INDEX) };\n  }\n\n  // The z-coordinates returned for the iris are unreliable, so we take the z values from the surrounding keypoints.\n  getAdjustedIrisCoords(rawCoords, irisCoords, direction) {\n    const upperCenterZ = rawCoords[keypoints.MESH_ANNOTATIONS[`${direction}EyeUpper0`][IRIS_UPPER_CENTER_INDEX]][2];\n    const lowerCenterZ = rawCoords[keypoints.MESH_ANNOTATIONS[`${direction}EyeLower0`][IRIS_LOWER_CENTER_INDEX]][2];\n    const averageZ = (upperCenterZ + lowerCenterZ) / 2;\n    // Iris indices: 0: center | 1: right | 2: above | 3: left | 4: below\n    return irisCoords.map((coord, i) => {\n      let z = averageZ;\n      if (i === 2) {\n        z = upperCenterZ;\n      } else if (i === 4) {\n        z = lowerCenterZ;\n      }\n      return [coord[0], coord[1], z];\n    });\n  }\n\n  async predict(input, config) {\n    this.skipFrames = config.detector.skipFrames;\n    this.maxFaces = config.detector.maxFaces;\n    this.runsWithoutFaceDetector++;\n    if (this.shouldUpdateRegionsOfInterest()) {\n      const detector = await this.boundingBoxDetector.getBoundingBoxes(input);\n      if (detector.boxes.length === 0) {\n        this.regionsOfInterest = [];\n        return null;\n      }\n      const scaledBoxes = detector.boxes.map((prediction) => {\n        const startPoint = prediction.box.startPoint.squeeze();\n        const endPoint = prediction.box.endPoint.squeeze();\n        const predictionBox = {\n          startPoint: startPoint.arraySync(),\n          endPoint: endPoint.arraySync(),\n        };\n        startPoint.dispose();\n        endPoint.dispose();\n        const scaledBox = bounding.scaleBoxCoordinates(predictionBox, detector.scaleFactor);\n        const enlargedBox = bounding.enlargeBox(scaledBox);\n        const landmarks = prediction.landmarks.arraySync();\n        prediction.box.startPoint.dispose();\n        prediction.box.endPoint.dispose();\n        prediction.landmarks.dispose();\n        prediction.probability.dispose();\n        return { ...enlargedBox, landmarks };\n      });\n      this.updateRegionsOfInterest(scaledBoxes);\n      this.runsWithoutFaceDetector = 0;\n    }\n    const results = tf.tidy(() => this.regionsOfInterest.map((box, i) => {\n      let angle = 0;\n      // The facial bounding box landmarks could come either from blazeface (if we are using a fresh box), or from the mesh model (if we are reusing an old box).\n      const boxLandmarksFromMeshModel = box.landmarks.length >= LANDMARKS_COUNT;\n      let [indexOfMouth, indexOfForehead] = MESH_KEYPOINTS_LINE_OF_SYMMETRY_INDICES;\n      if (boxLandmarksFromMeshModel === false) {\n        [indexOfMouth, indexOfForehead] = BLAZEFACE_KEYPOINTS_LINE_OF_SYMMETRY_INDICES;\n      }\n      angle = util.computeRotation(box.landmarks[indexOfMouth], box.landmarks[indexOfForehead]);\n      const faceCenter = bounding.getBoxCenter({ startPoint: box.startPoint, endPoint: box.endPoint });\n      const faceCenterNormalized = [faceCenter[0] / input.shape[2], faceCenter[1] / input.shape[1]];\n      let rotatedImage = input;\n      let rotationMatrix = util.IDENTITY_MATRIX;\n      if (angle !== 0) {\n        rotatedImage = tf.image.rotateWithOffset(input, angle, 0, faceCenterNormalized);\n        rotationMatrix = util.buildRotationMatrix(-angle, faceCenter);\n      }\n      const boxCPU = { startPoint: box.startPoint, endPoint: box.endPoint };\n      const face = bounding.cutBoxFromImageAndResize(boxCPU, rotatedImage, [this.meshHeight, this.meshWidth]).div(255);\n      // The first returned tensor represents facial contours, which are included in the coordinates.\n      const [, flag, coords] = this.meshDetector.predict(face);\n      const coordsReshaped = tf.reshape(coords, [-1, 3]);\n      let rawCoords = coordsReshaped.arraySync();\n      if (config.iris.enabled) {\n        const { box: leftEyeBox, boxSize: leftEyeBoxSize, crop: leftEyeCrop } = this.getEyeBox(rawCoords, face, LEFT_EYE_BOUNDS[0], LEFT_EYE_BOUNDS[1], true);\n        const { box: rightEyeBox, boxSize: rightEyeBoxSize, crop: rightEyeCrop } = this.getEyeBox(rawCoords, face, RIGHT_EYE_BOUNDS[0], RIGHT_EYE_BOUNDS[1]);\n        const eyePredictions = (this.irisModel.predict(tf.concat([leftEyeCrop, rightEyeCrop])));\n        const eyePredictionsData = eyePredictions.dataSync();\n        eyePredictions.dispose();\n        const leftEyeData = eyePredictionsData.slice(0, IRIS_NUM_COORDINATES * 3);\n        const { rawCoords: leftEyeRawCoords, iris: leftIrisRawCoords } = this.getEyeCoords(leftEyeData, leftEyeBox, leftEyeBoxSize, true);\n        const rightEyeData = eyePredictionsData.slice(IRIS_NUM_COORDINATES * 3);\n        const { rawCoords: rightEyeRawCoords, iris: rightIrisRawCoords } = this.getEyeCoords(rightEyeData, rightEyeBox, rightEyeBoxSize);\n        const leftToRightEyeDepthDifference = this.getLeftToRightEyeDepthDifference(rawCoords);\n        if (Math.abs(leftToRightEyeDepthDifference) < 30) { // User is looking straight ahead.\n          replaceRawCoordinates(rawCoords, leftEyeRawCoords, 'left');\n          replaceRawCoordinates(rawCoords, rightEyeRawCoords, 'right');\n          // If the user is looking to the left or to the right, the iris coordinates tend to diverge too much from the mesh coordinates for them to be merged. So we only update a single contour line above and below the eye.\n        } else if (leftToRightEyeDepthDifference < 1) { // User is looking towards the right.\n          replaceRawCoordinates(rawCoords, leftEyeRawCoords, 'left', ['EyeUpper0', 'EyeLower0']);\n        } else { // User is looking towards the left.\n          replaceRawCoordinates(rawCoords, rightEyeRawCoords, 'right', ['EyeUpper0', 'EyeLower0']);\n        }\n        const adjustedLeftIrisCoords = this.getAdjustedIrisCoords(rawCoords, leftIrisRawCoords, 'left');\n        const adjustedRightIrisCoords = this.getAdjustedIrisCoords(rawCoords, rightIrisRawCoords, 'right');\n        rawCoords = rawCoords.concat(adjustedLeftIrisCoords).concat(adjustedRightIrisCoords);\n      }\n      const transformedCoordsData = this.transformRawCoords(rawCoords, box, angle, rotationMatrix);\n      tf.dispose(rawCoords);\n      const landmarksBox = bounding.enlargeBox(this.calculateLandmarksBoundingBox(transformedCoordsData));\n      const confidence = flag.squeeze();\n      tf.dispose(flag);\n      if (config.mesh.enabled) {\n        const transformedCoords = tf.tensor2d(transformedCoordsData);\n        this.regionsOfInterest[i] = { ...landmarksBox, landmarks: transformedCoords.arraySync() };\n        const prediction = {\n          coords: transformedCoords,\n          box: landmarksBox,\n          confidence,\n          image: face,\n        };\n        return prediction;\n      }\n      const prediction = {\n        coords: null,\n        box: landmarksBox,\n        confidence,\n        image: face,\n      };\n      return prediction;\n    }));\n    return results;\n  }\n\n  // Updates regions of interest if the intersection over union between the incoming and previous regions falls below a threshold.\n  updateRegionsOfInterest(boxes) {\n    for (let i = 0; i < boxes.length; i++) {\n      const box = boxes[i];\n      const previousBox = this.regionsOfInterest[i];\n      let iou = 0;\n      if (previousBox && previousBox.startPoint) {\n        const [boxStartX, boxStartY] = box.startPoint;\n        const [boxEndX, boxEndY] = box.endPoint;\n        const [previousBoxStartX, previousBoxStartY] = previousBox.startPoint;\n        const [previousBoxEndX, previousBoxEndY] = previousBox.endPoint;\n        const xStartMax = Math.max(boxStartX, previousBoxStartX);\n        const yStartMax = Math.max(boxStartY, previousBoxStartY);\n        const xEndMin = Math.min(boxEndX, previousBoxEndX);\n        const yEndMin = Math.min(boxEndY, previousBoxEndY);\n        const intersection = (xEndMin - xStartMax) * (yEndMin - yStartMax);\n        const boxArea = (boxEndX - boxStartX) * (boxEndY - boxStartY);\n        const previousBoxArea = (previousBoxEndX - previousBoxStartX) * (previousBoxEndY - boxStartY);\n        iou = intersection / (boxArea + previousBoxArea - intersection);\n      }\n      if (iou < UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD) {\n        this.regionsOfInterest[i] = box;\n      }\n    }\n    this.regionsOfInterest = this.regionsOfInterest.slice(0, boxes.length);\n  }\n\n  clearRegionOfInterest(index) {\n    if (this.regionsOfInterest[index] != null) {\n      this.regionsOfInterest = [\n        ...this.regionsOfInterest.slice(0, index),\n        ...this.regionsOfInterest.slice(index + 1),\n      ];\n    }\n  }\n\n  shouldUpdateRegionsOfInterest() {\n    if (this.regionsOfInterest.length === 0) return true; // nothing detected, so run detector on the next frame\n    return (this.regionsOfInterest.length !== this.maxFaces) && (this.runsWithoutFaceDetector >= this.skipFrames);\n  }\n\n  calculateLandmarksBoundingBox(landmarks) {\n    const xs = landmarks.map((d) => d[0]);\n    const ys = landmarks.map((d) => d[1]);\n    const startPoint = [Math.min(...xs), Math.min(...ys)];\n    const endPoint = [Math.max(...xs), Math.max(...ys)];\n    return { startPoint, endPoint, landmarks };\n  }\n}\nexports.Pipeline = Pipeline;\n", "exports.UV_COORDS = [\n  [0.499976992607117, 0.652534008026123],\n  [0.500025987625122, 0.547487020492554],\n  [0.499974012374878, 0.602371990680695],\n  [0.482113003730774, 0.471979022026062],\n  [0.500150978565216, 0.527155995368958],\n  [0.499909996986389, 0.498252987861633],\n  [0.499523013830185, 0.40106201171875],\n  [0.289712011814117, 0.380764007568359],\n  [0.499954998493195, 0.312398016452789],\n  [0.499987006187439, 0.269918978214264],\n  [0.500023007392883, 0.107050001621246],\n  [0.500023007392883, 0.666234016418457],\n  [0.5000159740448, 0.679224014282227],\n  [0.500023007392883, 0.692348003387451],\n  [0.499976992607117, 0.695277988910675],\n  [0.499976992607117, 0.70593398809433],\n  [0.499976992607117, 0.719385027885437],\n  [0.499976992607117, 0.737019002437592],\n  [0.499967992305756, 0.781370997428894],\n  [0.499816000461578, 0.562981009483337],\n  [0.473773002624512, 0.573909997940063],\n  [0.104906998574734, 0.254140973091125],\n  [0.365929991006851, 0.409575998783112],\n  [0.338757991790771, 0.41302502155304],\n  [0.311120003461838, 0.409460008144379],\n  [0.274657994508743, 0.389131009578705],\n  [0.393361985683441, 0.403706014156342],\n  [0.345234006643295, 0.344011008739471],\n  [0.370094001293182, 0.346076011657715],\n  [0.319321990013123, 0.347265005111694],\n  [0.297903001308441, 0.353591024875641],\n  [0.24779200553894, 0.410809993743896],\n  [0.396889001131058, 0.842755019664764],\n  [0.280097991228104, 0.375599980354309],\n  [0.106310002505779, 0.399955987930298],\n  [0.2099249958992, 0.391353011131287],\n  [0.355807989835739, 0.534406006336212],\n  [0.471751004457474, 0.65040397644043],\n  [0.474155008792877, 0.680191993713379],\n  [0.439785003662109, 0.657229006290436],\n  [0.414617002010345, 0.66654098033905],\n  [0.450374007225037, 0.680860996246338],\n  [0.428770989179611, 0.682690978050232],\n  [0.374971002340317, 0.727805018424988],\n  [0.486716985702515, 0.547628998756409],\n  [0.485300987958908, 0.527395009994507],\n  [0.257764995098114, 0.314490020275116],\n  [0.401223003864288, 0.455172002315521],\n  [0.429818987846375, 0.548614978790283],\n  [0.421351999044418, 0.533740997314453],\n  [0.276895999908447, 0.532056987285614],\n  [0.483370006084442, 0.499586999416351],\n  [0.33721199631691, 0.282882988452911],\n  [0.296391993761063, 0.293242990970612],\n  [0.169294998049736, 0.193813979625702],\n  [0.447580009698868, 0.302609980106354],\n  [0.392390012741089, 0.353887975215912],\n  [0.354490011930466, 0.696784019470215],\n  [0.067304998636246, 0.730105042457581],\n  [0.442739009857178, 0.572826027870178],\n  [0.457098007202148, 0.584792017936707],\n  [0.381974011659622, 0.694710969924927],\n  [0.392388999462128, 0.694203019142151],\n  [0.277076005935669, 0.271932005882263],\n  [0.422551989555359, 0.563233017921448],\n  [0.385919004678726, 0.281364023685455],\n  [0.383103013038635, 0.255840003490448],\n  [0.331431001424789, 0.119714021682739],\n  [0.229923993349075, 0.232002973556519],\n  [0.364500999450684, 0.189113974571228],\n  [0.229622006416321, 0.299540996551514],\n  [0.173287004232407, 0.278747975826263],\n  [0.472878992557526, 0.666198015213013],\n  [0.446828007698059, 0.668527007102966],\n  [0.422762006521225, 0.673889994621277],\n  [0.445307999849319, 0.580065965652466],\n  [0.388103008270264, 0.693961024284363],\n  [0.403039008378983, 0.706539988517761],\n  [0.403629004955292, 0.693953037261963],\n  [0.460041999816895, 0.557139039039612],\n  [0.431158006191254, 0.692366003990173],\n  [0.452181994915009, 0.692366003990173],\n  [0.475387006998062, 0.692366003990173],\n  [0.465828001499176, 0.779190003871918],\n  [0.472328990697861, 0.736225962638855],\n  [0.473087012767792, 0.717857003211975],\n  [0.473122000694275, 0.704625964164734],\n  [0.473033010959625, 0.695277988910675],\n  [0.427942007780075, 0.695277988910675],\n  [0.426479011774063, 0.703539967536926],\n  [0.423162013292313, 0.711845993995667],\n  [0.4183090031147, 0.720062971115112],\n  [0.390094995498657, 0.639572978019714],\n  [0.013953999616206, 0.560034036636353],\n  [0.499913990497589, 0.58014702796936],\n  [0.413199990987778, 0.69539999961853],\n  [0.409626007080078, 0.701822996139526],\n  [0.468080013990402, 0.601534962654114],\n  [0.422728985548019, 0.585985004901886],\n  [0.463079988956451, 0.593783974647522],\n  [0.37211999297142, 0.47341400384903],\n  [0.334562003612518, 0.496073007583618],\n  [0.411671012639999, 0.546965003013611],\n  [0.242175996303558, 0.14767599105835],\n  [0.290776997804642, 0.201445996761322],\n  [0.327338010072708, 0.256527006626129],\n  [0.399509996175766, 0.748921036720276],\n  [0.441727995872498, 0.261676013469696],\n  [0.429764986038208, 0.187834024429321],\n  [0.412198007106781, 0.108901023864746],\n  [0.288955003023148, 0.398952007293701],\n  [0.218936994671822, 0.435410976409912],\n  [0.41278201341629, 0.398970007896423],\n  [0.257135003805161, 0.355440020561218],\n  [0.427684992551804, 0.437960982322693],\n  [0.448339998722076, 0.536936044692993],\n  [0.178560003638268, 0.45755398273468],\n  [0.247308000922203, 0.457193970680237],\n  [0.286267012357712, 0.467674970626831],\n  [0.332827985286713, 0.460712015628815],\n  [0.368755996227264, 0.447206974029541],\n  [0.398963987827301, 0.432654976844788],\n  [0.476410001516342, 0.405806005001068],\n  [0.189241006970406, 0.523923993110657],\n  [0.228962004184723, 0.348950982093811],\n  [0.490725994110107, 0.562400996685028],\n  [0.404670000076294, 0.485132992267609],\n  [0.019469000399113, 0.401564002037048],\n  [0.426243007183075, 0.420431017875671],\n  [0.396993011236191, 0.548797011375427],\n  [0.266469985246658, 0.376977026462555],\n  [0.439121007919312, 0.51895797252655],\n  [0.032313998788595, 0.644356966018677],\n  [0.419054001569748, 0.387154996395111],\n  [0.462783008813858, 0.505746960639954],\n  [0.238978996872902, 0.779744982719421],\n  [0.198220998048782, 0.831938028335571],\n  [0.107550002634525, 0.540755033493042],\n  [0.183610007166862, 0.740257024765015],\n  [0.134409993886948, 0.333683013916016],\n  [0.385764002799988, 0.883153975009918],\n  [0.490967005491257, 0.579378008842468],\n  [0.382384985685349, 0.508572995662689],\n  [0.174399003386497, 0.397670984268188],\n  [0.318785011768341, 0.39623498916626],\n  [0.343364000320435, 0.400596976280212],\n  [0.396100014448166, 0.710216999053955],\n  [0.187885001301765, 0.588537991046906],\n  [0.430987000465393, 0.944064974784851],\n  [0.318993002176285, 0.898285031318665],\n  [0.266247987747192, 0.869701027870178],\n  [0.500023007392883, 0.190576016902924],\n  [0.499976992607117, 0.954452991485596],\n  [0.366169989109039, 0.398822009563446],\n  [0.393207013607025, 0.39553701877594],\n  [0.410373002290726, 0.391080021858215],\n  [0.194993004202843, 0.342101991176605],\n  [0.388664990663528, 0.362284004688263],\n  [0.365961998701096, 0.355970978736877],\n  [0.343364000320435, 0.355356991291046],\n  [0.318785011768341, 0.35834002494812],\n  [0.301414996385574, 0.363156020641327],\n  [0.058132998645306, 0.319076001644135],\n  [0.301414996385574, 0.387449026107788],\n  [0.499987989664078, 0.618434011936188],\n  [0.415838003158569, 0.624195992946625],\n  [0.445681989192963, 0.566076993942261],\n  [0.465844005346298, 0.620640993118286],\n  [0.49992299079895, 0.351523995399475],\n  [0.288718998432159, 0.819945991039276],\n  [0.335278987884521, 0.852819979190826],\n  [0.440512001514435, 0.902418971061707],\n  [0.128294005990028, 0.791940987110138],\n  [0.408771991729736, 0.373893976211548],\n  [0.455606997013092, 0.451801002025604],\n  [0.499877005815506, 0.908990025520325],\n  [0.375436991453171, 0.924192011356354],\n  [0.11421000212431, 0.615022003650665],\n  [0.448662012815475, 0.695277988910675],\n  [0.4480200111866, 0.704632043838501],\n  [0.447111994028091, 0.715808033943176],\n  [0.444831997156143, 0.730794012546539],\n  [0.430011987686157, 0.766808986663818],\n  [0.406787008047104, 0.685672998428345],\n  [0.400738000869751, 0.681069016456604],\n  [0.392399996519089, 0.677703022956848],\n  [0.367855995893478, 0.663918972015381],\n  [0.247923001646996, 0.601333022117615],\n  [0.452769994735718, 0.420849978923798],\n  [0.43639200925827, 0.359887003898621],\n  [0.416164010763168, 0.368713974952698],\n  [0.413385987281799, 0.692366003990173],\n  [0.228018000721931, 0.683571994304657],\n  [0.468268007040024, 0.352671027183533],\n  [0.411361992359161, 0.804327011108398],\n  [0.499989002943039, 0.469825029373169],\n  [0.479153990745544, 0.442654013633728],\n  [0.499974012374878, 0.439637005329132],\n  [0.432112008333206, 0.493588984012604],\n  [0.499886006116867, 0.866917014122009],\n  [0.49991300702095, 0.821729004383087],\n  [0.456548988819122, 0.819200992584229],\n  [0.344549000263214, 0.745438992977142],\n  [0.37890899181366, 0.574010014533997],\n  [0.374292999505997, 0.780184984207153],\n  [0.319687992334366, 0.570737957954407],\n  [0.357154995203018, 0.604269981384277],\n  [0.295284003019333, 0.621580958366394],\n  [0.447750002145767, 0.862477004528046],\n  [0.410986006259918, 0.508723020553589],\n  [0.31395098567009, 0.775308012962341],\n  [0.354128003120422, 0.812552988529205],\n  [0.324548006057739, 0.703992962837219],\n  [0.189096003770828, 0.646299958229065],\n  [0.279776990413666, 0.71465802192688],\n  [0.1338230073452, 0.682700991630554],\n  [0.336768001317978, 0.644733011722565],\n  [0.429883986711502, 0.466521978378296],\n  [0.455527991056442, 0.548622965812683],\n  [0.437114000320435, 0.558896005153656],\n  [0.467287987470627, 0.529924988746643],\n  [0.414712011814117, 0.335219979286194],\n  [0.37704598903656, 0.322777986526489],\n  [0.344107985496521, 0.320150971412659],\n  [0.312875986099243, 0.32233202457428],\n  [0.283526003360748, 0.333190023899078],\n  [0.241245999932289, 0.382785975933075],\n  [0.102986000478268, 0.468762993812561],\n  [0.267612010240555, 0.424560010433197],\n  [0.297879010438919, 0.433175981044769],\n  [0.333433985710144, 0.433878004550934],\n  [0.366427004337311, 0.426115989685059],\n  [0.396012008190155, 0.416696012020111],\n  [0.420121014118195, 0.41022801399231],\n  [0.007561000064015, 0.480777025222778],\n  [0.432949006557465, 0.569517970085144],\n  [0.458638995885849, 0.479089021682739],\n  [0.473466008901596, 0.545744001865387],\n  [0.476087987422943, 0.563830018043518],\n  [0.468472003936768, 0.555056989192963],\n  [0.433990985155106, 0.582361996173859],\n  [0.483518004417419, 0.562983989715576],\n  [0.482482999563217, 0.57784903049469],\n  [0.42645001411438, 0.389798998832703],\n  [0.438998997211456, 0.39649498462677],\n  [0.450067013502121, 0.400434017181396],\n  [0.289712011814117, 0.368252992630005],\n  [0.276670008897781, 0.363372981548309],\n  [0.517862021923065, 0.471948027610779],\n  [0.710287988185883, 0.380764007568359],\n  [0.526226997375488, 0.573909997940063],\n  [0.895093023777008, 0.254140973091125],\n  [0.634069979190826, 0.409575998783112],\n  [0.661242008209229, 0.41302502155304],\n  [0.688880026340485, 0.409460008144379],\n  [0.725341975688934, 0.389131009578705],\n  [0.606630027294159, 0.40370500087738],\n  [0.654766023159027, 0.344011008739471],\n  [0.629905998706818, 0.346076011657715],\n  [0.680678009986877, 0.347265005111694],\n  [0.702096998691559, 0.353591024875641],\n  [0.75221198797226, 0.410804986953735],\n  [0.602918028831482, 0.842862963676453],\n  [0.719901978969574, 0.375599980354309],\n  [0.893692970275879, 0.399959981441498],\n  [0.790081977844238, 0.391354024410248],\n  [0.643998026847839, 0.534487962722778],\n  [0.528249025344849, 0.65040397644043],\n  [0.525849997997284, 0.680191040039062],\n  [0.560214996337891, 0.657229006290436],\n  [0.585384011268616, 0.66654098033905],\n  [0.549625992774963, 0.680860996246338],\n  [0.57122802734375, 0.682691991329193],\n  [0.624852001667023, 0.72809898853302],\n  [0.513050019741058, 0.547281980514526],\n  [0.51509702205658, 0.527251958847046],\n  [0.742246985435486, 0.314507007598877],\n  [0.598631024360657, 0.454979002475739],\n  [0.570338010787964, 0.548575043678284],\n  [0.578631997108459, 0.533622980117798],\n  [0.723087012767792, 0.532054007053375],\n  [0.516445994377136, 0.499638974666595],\n  [0.662801027297974, 0.282917976379395],\n  [0.70362401008606, 0.293271005153656],\n  [0.830704987049103, 0.193813979625702],\n  [0.552385985851288, 0.302568018436432],\n  [0.607609987258911, 0.353887975215912],\n  [0.645429015159607, 0.696707010269165],\n  [0.932694971561432, 0.730105042457581],\n  [0.557260990142822, 0.572826027870178],\n  [0.542901992797852, 0.584792017936707],\n  [0.6180260181427, 0.694710969924927],\n  [0.607590973377228, 0.694203019142151],\n  [0.722943007946014, 0.271963000297546],\n  [0.577413976192474, 0.563166975975037],\n  [0.614082992076874, 0.281386971473694],\n  [0.616907000541687, 0.255886018276215],\n  [0.668509006500244, 0.119913995265961],\n  [0.770092010498047, 0.232020974159241],\n  [0.635536015033722, 0.189248979091644],\n  [0.77039098739624, 0.299556016921997],\n  [0.826722025871277, 0.278755009174347],\n  [0.527121007442474, 0.666198015213013],\n  [0.553171992301941, 0.668527007102966],\n  [0.577238023281097, 0.673889994621277],\n  [0.554691970348358, 0.580065965652466],\n  [0.611896991729736, 0.693961024284363],\n  [0.59696102142334, 0.706539988517761],\n  [0.596370995044708, 0.693953037261963],\n  [0.539958000183105, 0.557139039039612],\n  [0.568841993808746, 0.692366003990173],\n  [0.547818005084991, 0.692366003990173],\n  [0.52461302280426, 0.692366003990173],\n  [0.534089982509613, 0.779141008853912],\n  [0.527670979499817, 0.736225962638855],\n  [0.526912987232208, 0.717857003211975],\n  [0.526877999305725, 0.704625964164734],\n  [0.526966989040375, 0.695277988910675],\n  [0.572058022022247, 0.695277988910675],\n  [0.573521018028259, 0.703539967536926],\n  [0.57683801651001, 0.711845993995667],\n  [0.581691026687622, 0.720062971115112],\n  [0.609944999217987, 0.639909982681274],\n  [0.986046016216278, 0.560034036636353],\n  [0.5867999792099, 0.69539999961853],\n  [0.590372025966644, 0.701822996139526],\n  [0.531915009021759, 0.601536989212036],\n  [0.577268004417419, 0.585934996604919],\n  [0.536915004253387, 0.593786001205444],\n  [0.627542972564697, 0.473352015018463],\n  [0.665585994720459, 0.495950996875763],\n  [0.588353991508484, 0.546862006187439],\n  [0.757824003696442, 0.14767599105835],\n  [0.709249973297119, 0.201507985591888],\n  [0.672684013843536, 0.256581008434296],\n  [0.600408971309662, 0.74900496006012],\n  [0.55826598405838, 0.261672019958496],\n  [0.570303976535797, 0.187870979309082],\n  [0.588165998458862, 0.109044015407562],\n  [0.711045026779175, 0.398952007293701],\n  [0.781069993972778, 0.435405015945435],\n  [0.587247014045715, 0.398931980133057],\n  [0.742869973182678, 0.355445981025696],\n  [0.572156012058258, 0.437651991844177],\n  [0.55186802148819, 0.536570012569427],\n  [0.821442008018494, 0.457556009292603],\n  [0.752701997756958, 0.457181990146637],\n  [0.71375697851181, 0.467626988887787],\n  [0.66711300611496, 0.460672974586487],\n  [0.631101012229919, 0.447153985500336],\n  [0.6008620262146, 0.432473003864288],\n  [0.523481011390686, 0.405627012252808],\n  [0.810747981071472, 0.523926019668579],\n  [0.771045982837677, 0.348959028720856],\n  [0.509127020835876, 0.562718033790588],\n  [0.595292985439301, 0.485023975372314],\n  [0.980530977249146, 0.401564002037048],\n  [0.573499977588654, 0.420000016689301],\n  [0.602994978427887, 0.548687994480133],\n  [0.733529984951019, 0.376977026462555],\n  [0.560611009597778, 0.519016981124878],\n  [0.967685997486115, 0.644356966018677],\n  [0.580985009670258, 0.387160003185272],\n  [0.537728011608124, 0.505385041236877],\n  [0.760966002941132, 0.779752969741821],\n  [0.801778972148895, 0.831938028335571],\n  [0.892440974712372, 0.54076099395752],\n  [0.816350996494293, 0.740260004997253],\n  [0.865594983100891, 0.333687007427216],\n  [0.614073991775513, 0.883246004581451],\n  [0.508952975273132, 0.579437971115112],\n  [0.617941975593567, 0.508316040039062],\n  [0.825608015060425, 0.397674977779388],\n  [0.681214988231659, 0.39623498916626],\n  [0.656635999679565, 0.400596976280212],\n  [0.603900015354156, 0.710216999053955],\n  [0.81208598613739, 0.588539004325867],\n  [0.56801301240921, 0.944564998149872],\n  [0.681007981300354, 0.898285031318665],\n  [0.733752012252808, 0.869701027870178],\n  [0.633830010890961, 0.398822009563446],\n  [0.606792986392975, 0.39553701877594],\n  [0.589659988880157, 0.391062021255493],\n  [0.805015981197357, 0.342108011245728],\n  [0.611334979534149, 0.362284004688263],\n  [0.634037971496582, 0.355970978736877],\n  [0.656635999679565, 0.355356991291046],\n  [0.681214988231659, 0.35834002494812],\n  [0.698584973812103, 0.363156020641327],\n  [0.941866993904114, 0.319076001644135],\n  [0.698584973812103, 0.387449026107788],\n  [0.584177017211914, 0.624107003211975],\n  [0.554318010807037, 0.566076993942261],\n  [0.534153997898102, 0.62064003944397],\n  [0.711217999458313, 0.819975018501282],\n  [0.664629995822906, 0.852871000766754],\n  [0.559099972248077, 0.902631998062134],\n  [0.871706008911133, 0.791940987110138],\n  [0.591234028339386, 0.373893976211548],\n  [0.544341027736664, 0.451583981513977],\n  [0.624562978744507, 0.924192011356354],\n  [0.88577002286911, 0.615028977394104],\n  [0.551338016986847, 0.695277988910675],\n  [0.551980018615723, 0.704632043838501],\n  [0.552887976169586, 0.715808033943176],\n  [0.555167973041534, 0.730794012546539],\n  [0.569944024085999, 0.767035007476807],\n  [0.593203008174896, 0.685675978660583],\n  [0.599261999130249, 0.681069016456604],\n  [0.607599973678589, 0.677703022956848],\n  [0.631937980651855, 0.663500010967255],\n  [0.752032995223999, 0.601315021514893],\n  [0.547226011753082, 0.420395016670227],\n  [0.563543975353241, 0.359827995300293],\n  [0.583841025829315, 0.368713974952698],\n  [0.586614012718201, 0.692366003990173],\n  [0.771915018558502, 0.683578014373779],\n  [0.531597018241882, 0.352482974529266],\n  [0.588370978832245, 0.804440975189209],\n  [0.52079701423645, 0.442565023899078],\n  [0.567984998226166, 0.493479013442993],\n  [0.543282985687256, 0.819254994392395],\n  [0.655317008495331, 0.745514988899231],\n  [0.621008992195129, 0.574018001556396],\n  [0.625559985637665, 0.78031200170517],\n  [0.680198013782501, 0.570719003677368],\n  [0.64276397228241, 0.604337990283966],\n  [0.704662978649139, 0.621529996395111],\n  [0.552012026309967, 0.862591981887817],\n  [0.589071989059448, 0.508637011051178],\n  [0.685944974422455, 0.775357007980347],\n  [0.645735025405884, 0.812640011310577],\n  [0.675342977046967, 0.703978002071381],\n  [0.810858011245728, 0.646304965019226],\n  [0.72012197971344, 0.714666962623596],\n  [0.866151988506317, 0.682704985141754],\n  [0.663187026977539, 0.644596993923187],\n  [0.570082008838654, 0.466325998306274],\n  [0.544561982154846, 0.548375964164734],\n  [0.562758982181549, 0.558784961700439],\n  [0.531987011432648, 0.530140042304993],\n  [0.585271000862122, 0.335177004337311],\n  [0.622952997684479, 0.32277899980545],\n  [0.655896008014679, 0.320163011550903],\n  [0.687132000923157, 0.322345972061157],\n  [0.716481983661652, 0.333200991153717],\n  [0.758756995201111, 0.382786989212036],\n  [0.897013008594513, 0.468769013881683],\n  [0.732392013072968, 0.424547016620636],\n  [0.70211398601532, 0.433162987232208],\n  [0.66652500629425, 0.433866024017334],\n  [0.633504986763, 0.426087975502014],\n  [0.603875994682312, 0.416586995124817],\n  [0.579657971858978, 0.409945011138916],\n  [0.992439985275269, 0.480777025222778],\n  [0.567192018032074, 0.569419980049133],\n  [0.54136598110199, 0.478899002075195],\n  [0.526564002037048, 0.546118021011353],\n  [0.523913025856018, 0.563830018043518],\n  [0.531529009342194, 0.555056989192963],\n  [0.566035985946655, 0.582329034805298],\n  [0.51631098985672, 0.563053965568542],\n  [0.5174720287323, 0.577877044677734],\n  [0.573594987392426, 0.389806985855103],\n  [0.560697972774506, 0.395331978797913],\n  [0.549755990505219, 0.399751007556915],\n  [0.710287988185883, 0.368252992630005],\n  [0.723330020904541, 0.363372981548309],\n];\n", "export default [\n  127, 34, 139, 11, 0, 37, 232, 231, 120, 72, 37, 39, 128, 121, 47, 232, 121,\n  128, 104, 69, 67, 175, 171, 148, 157, 154, 155, 118, 50, 101, 73, 39, 40, 9,\n  151, 108, 48, 115, 131, 194, 204, 211, 74, 40, 185, 80, 42, 183, 40, 92,\n  186, 230, 229, 118, 202, 212, 214, 83, 18, 17, 76, 61, 146, 160, 29, 30, 56,\n  157, 173, 106, 204, 194, 135, 214, 192, 203, 165, 98, 21, 71, 68, 51, 45, 4,\n  144, 24, 23, 77, 146, 91, 205, 50, 187, 201, 200, 18, 91, 106, 182, 90, 91,\n  181, 85, 84, 17, 206, 203, 36, 148, 171, 140, 92, 40, 39, 193, 189, 244,\n  159, 158, 28, 247, 246, 161, 236, 3, 196, 54, 68, 104, 193, 168, 8, 117,\n  228, 31, 189, 193, 55, 98, 97, 99, 126, 47, 100, 166, 79, 218, 155, 154, 26,\n  209, 49, 131, 135, 136, 150, 47, 126, 217, 223, 52, 53, 45, 51, 134, 211,\n  170, 140, 67, 69, 108, 43, 106, 91, 230, 119, 120, 226, 130, 247, 63, 53,\n  52, 238, 20, 242, 46, 70, 156, 78, 62, 96, 46, 53, 63, 143, 34, 227, 173,\n  155, 133, 123, 117, 111, 44, 125, 19, 236, 134, 51, 216, 206, 205, 154, 153,\n  22, 39, 37, 167, 200, 201, 208, 36, 142, 100, 57, 212, 202, 20, 60, 99, 28,\n  158, 157, 35, 226, 113, 160, 159, 27, 204, 202, 210, 113, 225, 46, 43, 202,\n  204, 62, 76, 77, 137, 123, 116, 41, 38, 72, 203, 129, 142, 64, 98, 240, 49,\n  102, 64, 41, 73, 74, 212, 216, 207, 42, 74, 184, 169, 170, 211, 170, 149,\n  176, 105, 66, 69, 122, 6, 168, 123, 147, 187, 96, 77, 90, 65, 55, 107, 89,\n  90, 180, 101, 100, 120, 63, 105, 104, 93, 137, 227, 15, 86, 85, 129, 102,\n  49, 14, 87, 86, 55, 8, 9, 100, 47, 121, 145, 23, 22, 88, 89, 179, 6, 122,\n  196, 88, 95, 96, 138, 172, 136, 215, 58, 172, 115, 48, 219, 42, 80, 81, 195,\n  3, 51, 43, 146, 61, 171, 175, 199, 81, 82, 38, 53, 46, 225, 144, 163, 110,\n  246, 33, 7, 52, 65, 66, 229, 228, 117, 34, 127, 234, 107, 108, 69, 109, 108,\n  151, 48, 64, 235, 62, 78, 191, 129, 209, 126, 111, 35, 143, 163, 161, 246,\n  117, 123, 50, 222, 65, 52, 19, 125, 141, 221, 55, 65, 3, 195, 197, 25, 7,\n  33, 220, 237, 44, 70, 71, 139, 122, 193, 245, 247, 130, 33, 71, 21, 162,\n  153, 158, 159, 170, 169, 150, 188, 174, 196, 216, 186, 92, 144, 160, 161, 2,\n  97, 167, 141, 125, 241, 164, 167, 37, 72, 38, 12, 145, 159, 160, 38, 82, 13,\n  63, 68, 71, 226, 35, 111, 158, 153, 154, 101, 50, 205, 206, 92, 165, 209,\n  198, 217, 165, 167, 97, 220, 115, 218, 133, 112, 243, 239, 238, 241, 214,\n  135, 169, 190, 173, 133, 171, 208, 32, 125, 44, 237, 86, 87, 178, 85, 86,\n  179, 84, 85, 180, 83, 84, 181, 201, 83, 182, 137, 93, 132, 76, 62, 183, 61,\n  76, 184, 57, 61, 185, 212, 57, 186, 214, 207, 187, 34, 143, 156, 79, 239,\n  237, 123, 137, 177, 44, 1, 4, 201, 194, 32, 64, 102, 129, 213, 215, 138, 59,\n  166, 219, 242, 99, 97, 2, 94, 141, 75, 59, 235, 24, 110, 228, 25, 130, 226,\n  23, 24, 229, 22, 23, 230, 26, 22, 231, 112, 26, 232, 189, 190, 243, 221, 56,\n  190, 28, 56, 221, 27, 28, 222, 29, 27, 223, 30, 29, 224, 247, 30, 225, 238,\n  79, 20, 166, 59, 75, 60, 75, 240, 147, 177, 215, 20, 79, 166, 187, 147, 213,\n  112, 233, 244, 233, 128, 245, 128, 114, 188, 114, 217, 174, 131, 115, 220,\n  217, 198, 236, 198, 131, 134, 177, 132, 58, 143, 35, 124, 110, 163, 7, 228,\n  110, 25, 356, 389, 368, 11, 302, 267, 452, 350, 349, 302, 303, 269, 357,\n  343, 277, 452, 453, 357, 333, 332, 297, 175, 152, 377, 384, 398, 382, 347,\n  348, 330, 303, 304, 270, 9, 336, 337, 278, 279, 360, 418, 262, 431, 304,\n  408, 409, 310, 415, 407, 270, 409, 410, 450, 348, 347, 422, 430, 434, 313,\n  314, 17, 306, 307, 375, 387, 388, 260, 286, 414, 398, 335, 406, 418, 364,\n  367, 416, 423, 358, 327, 251, 284, 298, 281, 5, 4, 373, 374, 253, 307, 320,\n  321, 425, 427, 411, 421, 313, 18, 321, 405, 406, 320, 404, 405, 315, 16, 17,\n  426, 425, 266, 377, 400, 369, 322, 391, 269, 417, 465, 464, 386, 257, 258,\n  466, 260, 388, 456, 399, 419, 284, 332, 333, 417, 285, 8, 346, 340, 261,\n  413, 441, 285, 327, 460, 328, 355, 371, 329, 392, 439, 438, 382, 341, 256,\n  429, 420, 360, 364, 394, 379, 277, 343, 437, 443, 444, 283, 275, 440, 363,\n  431, 262, 369, 297, 338, 337, 273, 375, 321, 450, 451, 349, 446, 342, 467,\n  293, 334, 282, 458, 461, 462, 276, 353, 383, 308, 324, 325, 276, 300, 293,\n  372, 345, 447, 382, 398, 362, 352, 345, 340, 274, 1, 19, 456, 248, 281, 436,\n  427, 425, 381, 256, 252, 269, 391, 393, 200, 199, 428, 266, 330, 329, 287,\n  273, 422, 250, 462, 328, 258, 286, 384, 265, 353, 342, 387, 259, 257, 424,\n  431, 430, 342, 353, 276, 273, 335, 424, 292, 325, 307, 366, 447, 345, 271,\n  303, 302, 423, 266, 371, 294, 455, 460, 279, 278, 294, 271, 272, 304, 432,\n  434, 427, 272, 407, 408, 394, 430, 431, 395, 369, 400, 334, 333, 299, 351,\n  417, 168, 352, 280, 411, 325, 319, 320, 295, 296, 336, 319, 403, 404, 330,\n  348, 349, 293, 298, 333, 323, 454, 447, 15, 16, 315, 358, 429, 279, 14, 15,\n  316, 285, 336, 9, 329, 349, 350, 374, 380, 252, 318, 402, 403, 6, 197, 419,\n  318, 319, 325, 367, 364, 365, 435, 367, 397, 344, 438, 439, 272, 271, 311,\n  195, 5, 281, 273, 287, 291, 396, 428, 199, 311, 271, 268, 283, 444, 445,\n  373, 254, 339, 263, 466, 249, 282, 334, 296, 449, 347, 346, 264, 447, 454,\n  336, 296, 299, 338, 10, 151, 278, 439, 455, 292, 407, 415, 358, 371, 355,\n  340, 345, 372, 390, 249, 466, 346, 347, 280, 442, 443, 282, 19, 94, 370,\n  441, 442, 295, 248, 419, 197, 263, 255, 359, 440, 275, 274, 300, 383, 368,\n  351, 412, 465, 263, 467, 466, 301, 368, 389, 380, 374, 386, 395, 378, 379,\n  412, 351, 419, 436, 426, 322, 373, 390, 388, 2, 164, 393, 370, 462, 461,\n  164, 0, 267, 302, 11, 12, 374, 373, 387, 268, 12, 13, 293, 300, 301, 446,\n  261, 340, 385, 384, 381, 330, 266, 425, 426, 423, 391, 429, 355, 437, 391,\n  327, 326, 440, 457, 438, 341, 382, 362, 459, 457, 461, 434, 430, 394, 414,\n  463, 362, 396, 369, 262, 354, 461, 457, 316, 403, 402, 315, 404, 403, 314,\n  405, 404, 313, 406, 405, 421, 418, 406, 366, 401, 361, 306, 408, 407, 291,\n  409, 408, 287, 410, 409, 432, 436, 410, 434, 416, 411, 264, 368, 383, 309,\n  438, 457, 352, 376, 401, 274, 275, 4, 421, 428, 262, 294, 327, 358, 433,\n  416, 367, 289, 455, 439, 462, 370, 326, 2, 326, 370, 305, 460, 455, 254,\n  449, 448, 255, 261, 446, 253, 450, 449, 252, 451, 450, 256, 452, 451, 341,\n  453, 452, 413, 464, 463, 441, 413, 414, 258, 442, 441, 257, 443, 442, 259,\n  444, 443, 260, 445, 444, 467, 342, 445, 459, 458, 250, 289, 392, 290, 290,\n  328, 460, 376, 433, 435, 250, 290, 392, 411, 416, 433, 341, 463, 464, 453,\n  464, 465, 357, 465, 412, 343, 412, 399, 360, 363, 440, 437, 399, 456, 420,\n  456, 363, 401, 435, 288, 372, 383, 353, 339, 255, 249, 448, 261, 255, 133,\n  243, 190, 133, 155, 112, 33, 246, 247, 33, 130, 25, 398, 384, 286, 362, 398,\n  414, 362, 463, 341, 263, 359, 467, 263, 249, 255, 466, 467, 260, 75, 60,\n  166, 238, 239, 79, 162, 127, 139, 72, 11, 37, 121, 232, 120, 73, 72, 39,\n  114, 128, 47, 233, 232, 128, 103, 104, 67, 152, 175, 148, 173, 157, 155,\n  119, 118, 101, 74, 73, 40, 107, 9, 108, 49, 48, 131, 32, 194, 211, 184, 74,\n  185, 191, 80, 183, 185, 40, 186, 119, 230, 118, 210, 202, 214, 84, 83, 17,\n  77, 76, 146, 161, 160, 30, 190, 56, 173, 182, 106, 194, 138, 135, 192, 129,\n  203, 98, 54, 21, 68, 5, 51, 4, 145, 144, 23, 90, 77, 91, 207, 205, 187, 83,\n  201, 18, 181, 91, 182, 180, 90, 181, 16, 85, 17, 205, 206, 36, 176, 148,\n  140, 165, 92, 39, 245, 193, 244, 27, 159, 28, 30, 247, 161, 174, 236, 196,\n  103, 54, 104, 55, 193, 8, 111, 117, 31, 221, 189, 55, 240, 98, 99, 142, 126,\n  100, 219, 166, 218, 112, 155, 26, 198, 209, 131, 169, 135, 150, 114, 47,\n  217, 224, 223, 53, 220, 45, 134, 32, 211, 140, 109, 67, 108, 146, 43, 91,\n  231, 230, 120, 113, 226, 247, 105, 63, 52, 241, 238, 242, 124, 46, 156, 95,\n  78, 96, 70, 46, 63, 116, 143, 227, 116, 123, 111, 1, 44, 19, 3, 236, 51,\n  207, 216, 205, 26, 154, 22, 165, 39, 167, 199, 200, 208, 101, 36, 100, 43,\n  57, 202, 242, 20, 99, 56, 28, 157, 124, 35, 113, 29, 160, 27, 211, 204, 210,\n  124, 113, 46, 106, 43, 204, 96, 62, 77, 227, 137, 116, 73, 41, 72, 36, 203,\n  142, 235, 64, 240, 48, 49, 64, 42, 41, 74, 214, 212, 207, 183, 42, 184, 210,\n  169, 211, 140, 170, 176, 104, 105, 69, 193, 122, 168, 50, 123, 187, 89, 96,\n  90, 66, 65, 107, 179, 89, 180, 119, 101, 120, 68, 63, 104, 234, 93, 227, 16,\n  15, 85, 209, 129, 49, 15, 14, 86, 107, 55, 9, 120, 100, 121, 153, 145, 22,\n  178, 88, 179, 197, 6, 196, 89, 88, 96, 135, 138, 136, 138, 215, 172, 218,\n  115, 219, 41, 42, 81, 5, 195, 51, 57, 43, 61, 208, 171, 199, 41, 81, 38,\n  224, 53, 225, 24, 144, 110, 105, 52, 66, 118, 229, 117, 227, 34, 234, 66,\n  107, 69, 10, 109, 151, 219, 48, 235, 183, 62, 191, 142, 129, 126, 116, 111,\n  143, 7, 163, 246, 118, 117, 50, 223, 222, 52, 94, 19, 141, 222, 221, 65,\n  196, 3, 197, 45, 220, 44, 156, 70, 139, 188, 122, 245, 139, 71, 162, 145,\n  153, 159, 149, 170, 150, 122, 188, 196, 206, 216, 92, 163, 144, 161, 164, 2,\n  167, 242, 141, 241, 0, 164, 37, 11, 72, 12, 144, 145, 160, 12, 38, 13, 70,\n  63, 71, 31, 226, 111, 157, 158, 154, 36, 101, 205, 203, 206, 165, 126, 209,\n  217, 98, 165, 97, 237, 220, 218, 237, 239, 241, 210, 214, 169, 140, 171, 32,\n  241, 125, 237, 179, 86, 178, 180, 85, 179, 181, 84, 180, 182, 83, 181, 194,\n  201, 182, 177, 137, 132, 184, 76, 183, 185, 61, 184, 186, 57, 185, 216, 212,\n  186, 192, 214, 187, 139, 34, 156, 218, 79, 237, 147, 123, 177, 45, 44, 4,\n  208, 201, 32, 98, 64, 129, 192, 213, 138, 235, 59, 219, 141, 242, 97, 97, 2,\n  141, 240, 75, 235, 229, 24, 228, 31, 25, 226, 230, 23, 229, 231, 22, 230,\n  232, 26, 231, 233, 112, 232, 244, 189, 243, 189, 221, 190, 222, 28, 221,\n  223, 27, 222, 224, 29, 223, 225, 30, 224, 113, 247, 225, 99, 60, 240, 213,\n  147, 215, 60, 20, 166, 192, 187, 213, 243, 112, 244, 244, 233, 245, 245,\n  128, 188, 188, 114, 174, 134, 131, 220, 174, 217, 236, 236, 198, 134, 215,\n  177, 58, 156, 143, 124, 25, 110, 7, 31, 228, 25, 264, 356, 368, 0, 11, 267,\n  451, 452, 349, 267, 302, 269, 350, 357, 277, 350, 452, 357, 299, 333, 297,\n  396, 175, 377, 381, 384, 382, 280, 347, 330, 269, 303, 270, 151, 9, 337,\n  344, 278, 360, 424, 418, 431, 270, 304, 409, 272, 310, 407, 322, 270, 410,\n  449, 450, 347, 432, 422, 434, 18, 313, 17, 291, 306, 375, 259, 387, 260,\n  424, 335, 418, 434, 364, 416, 391, 423, 327, 301, 251, 298, 275, 281, 4,\n  254, 373, 253, 375, 307, 321, 280, 425, 411, 200, 421, 18, 335, 321, 406,\n  321, 320, 405, 314, 315, 17, 423, 426, 266, 396, 377, 369, 270, 322, 269,\n  413, 417, 464, 385, 386, 258, 248, 456, 419, 298, 284, 333, 168, 417, 8,\n  448, 346, 261, 417, 413, 285, 326, 327, 328, 277, 355, 329, 309, 392, 438,\n  381, 382, 256, 279, 429, 360, 365, 364, 379, 355, 277, 437, 282, 443, 283,\n  281, 275, 363, 395, 431, 369, 299, 297, 337, 335, 273, 321, 348, 450, 349,\n  359, 446, 467, 283, 293, 282, 250, 458, 462, 300, 276, 383, 292, 308, 325,\n  283, 276, 293, 264, 372, 447, 346, 352, 340, 354, 274, 19, 363, 456, 281,\n  426, 436, 425, 380, 381, 252, 267, 269, 393, 421, 200, 428, 371, 266, 329,\n  432, 287, 422, 290, 250, 328, 385, 258, 384, 446, 265, 342, 386, 387, 257,\n  422, 424, 430, 445, 342, 276, 422, 273, 424, 306, 292, 307, 352, 366, 345,\n  268, 271, 302, 358, 423, 371, 327, 294, 460, 331, 279, 294, 303, 271, 304,\n  436, 432, 427, 304, 272, 408, 395, 394, 431, 378, 395, 400, 296, 334, 299,\n  6, 351, 168, 376, 352, 411, 307, 325, 320, 285, 295, 336, 320, 319, 404,\n  329, 330, 349, 334, 293, 333, 366, 323, 447, 316, 15, 315, 331, 358, 279,\n  317, 14, 316, 8, 285, 9, 277, 329, 350, 253, 374, 252, 319, 318, 403, 351,\n  6, 419, 324, 318, 325, 397, 367, 365, 288, 435, 397, 278, 344, 439, 310,\n  272, 311, 248, 195, 281, 375, 273, 291, 175, 396, 199, 312, 311, 268, 276,\n  283, 445, 390, 373, 339, 295, 282, 296, 448, 449, 346, 356, 264, 454, 337,\n  336, 299, 337, 338, 151, 294, 278, 455, 308, 292, 415, 429, 358, 355, 265,\n  340, 372, 388, 390, 466, 352, 346, 280, 295, 442, 282, 354, 19, 370, 285,\n  441, 295, 195, 248, 197, 457, 440, 274, 301, 300, 368, 417, 351, 465, 251,\n  301, 389, 385, 380, 386, 394, 395, 379, 399, 412, 419, 410, 436, 322, 387,\n  373, 388, 326, 2, 393, 354, 370, 461, 393, 164, 267, 268, 302, 12, 386, 374,\n  387, 312, 268, 13, 298, 293, 301, 265, 446, 340, 380, 385, 381, 280, 330,\n  425, 322, 426, 391, 420, 429, 437, 393, 391, 326, 344, 440, 438, 458, 459,\n  461, 364, 434, 394, 428, 396, 262, 274, 354, 457, 317, 316, 402, 316, 315,\n  403, 315, 314, 404, 314, 313, 405, 313, 421, 406, 323, 366, 361, 292, 306,\n  407, 306, 291, 408, 291, 287, 409, 287, 432, 410, 427, 434, 411, 372, 264,\n  383, 459, 309, 457, 366, 352, 401, 1, 274, 4, 418, 421, 262, 331, 294, 358,\n  435, 433, 367, 392, 289, 439, 328, 462, 326, 94, 2, 370, 289, 305, 455, 339,\n  254, 448, 359, 255, 446, 254, 253, 449, 253, 252, 450, 252, 256, 451, 256,\n  341, 452, 414, 413, 463, 286, 441, 414, 286, 258, 441, 258, 257, 442, 257,\n  259, 443, 259, 260, 444, 260, 467, 445, 309, 459, 250, 305, 289, 290, 305,\n  290, 460, 401, 376, 435, 309, 250, 392, 376, 411, 433, 453, 341, 464, 357,\n  453, 465, 343, 357, 412, 437, 343, 399, 344, 360, 440, 420, 437, 456, 360,\n  420, 363, 361, 401, 288, 265, 372, 353, 390, 339, 249, 339, 448, 255];\n", "const tf = require('@tensorflow/tfjs');\nconst blazeface = require('./blazeface');\nconst keypoints = require('./keypoints');\nconst pipe = require('./pipeline');\nconst uv_coords = require('./uvcoords');\nconst triangulation = require('./triangulation').default;\n\nclass MediaPipeFaceMesh {\n  constructor(blazeFace, blazeMeshModel, irisModel, config) {\n    this.pipeline = new pipe.Pipeline(blazeFace, blazeMeshModel, irisModel, config);\n    if (config) this.config = config;\n  }\n\n  async estimateFaces(input, config) {\n    if (config) this.config = config;\n    const predictions = await this.pipeline.predict(input, config);\n    const results = [];\n    for (const prediction of (predictions || [])) {\n      // guard against disposed tensors on long running operations such as pause in middle of processing\n      if (prediction.isDisposedInternal) continue;\n      const confidence = prediction.confidence.arraySync();\n      if (confidence >= this.config.detector.minConfidence) {\n        const mesh = prediction.coords ? prediction.coords.arraySync() : null;\n        const annotations = {};\n        if (mesh && mesh.length > 0) {\n          for (const key in keypoints.MESH_ANNOTATIONS) {\n            if (this.config.iris.enabled || key.includes('Iris') === false) {\n              annotations[key] = keypoints.MESH_ANNOTATIONS[key].map((index) => mesh[index]);\n            }\n          }\n        }\n        results.push({\n          confidence: confidence || 0,\n          box: prediction.box ? [prediction.box.startPoint[0], prediction.box.startPoint[1], prediction.box.endPoint[0] - prediction.box.startPoint[0], prediction.box.endPoint[1] - prediction.box.startPoint[1]] : 0,\n          mesh,\n          annotations,\n          image: prediction.image ? tf.clone(prediction.image) : null,\n        });\n      }\n      if (prediction.confidence) prediction.confidence.dispose();\n      if (prediction.coords) prediction.coords.dispose();\n      if (prediction.image) prediction.image.dispose();\n    }\n    return results;\n  }\n}\n\nasync function load(config) {\n  const models = await Promise.all([\n    blazeface.load(config),\n    tf.loadGraphModel(config.mesh.modelPath, { fromTFHub: config.mesh.modelPath.includes('tfhub.dev') }),\n    tf.loadGraphModel(config.iris.modelPath, { fromTFHub: config.iris.modelPath.includes('tfhub.dev') }),\n  ]);\n  const faceMesh = new MediaPipeFaceMesh(models[0], models[1], models[2], config);\n  return faceMesh;\n}\n\nexports.load = load;\nexports.MediaPipeFaceMesh = MediaPipeFaceMesh;\nexports.uv_coords = uv_coords;\nexports.triangulation = triangulation;\n", "const tf = require('@tensorflow/tfjs');\n\nconst models = {};\nlet last = { age: 0, gender: '' };\nlet frame = 0;\n\nasync function loadAge(config) {\n  if (!models.age) models.age = await tf.loadGraphModel(config.face.age.modelPath);\n  return models.age;\n}\n\nasync function loadGender(config) {\n  if (!models.gender) models.gender = await tf.loadGraphModel(config.face.gender.modelPath);\n  return models.gender;\n}\n\nasync function predict(image, config) {\n  if (frame < config.face.age.skipFrames) {\n    frame += 1;\n    return last;\n  }\n  frame = 0;\n  const resize = tf.image.resizeBilinear(image, [config.face.age.inputSize, config.face.age.inputSize], false);\n  const enhance = tf.mul(resize, [255.0]);\n  tf.dispose(resize);\n\n  const promises = [];\n  let ageT;\n  let genderT;\n  if (config.face.age.enabled) promises.push(ageT = models.age.predict(enhance));\n  if (config.face.gender.enabled) promises.push(genderT = models.gender.predict(enhance));\n  await Promise.all(promises);\n\n  const obj = {};\n  if (ageT) {\n    const data = await ageT.data();\n    obj.age = Math.trunc(10 * data[0]) / 10;\n    tf.dispose(ageT);\n  }\n  if (genderT) {\n    const data = await genderT.data();\n    const confidence = Math.trunc(Math.abs(1.9 * 100 * (data[0] - 0.5))) / 100;\n    if (confidence > config.face.gender.minConfidence) {\n      obj.gender = data[0] <= 0.5 ? 'female' : 'male';\n      obj.confidence = confidence;\n    }\n    tf.dispose(genderT);\n  }\n\n  tf.dispose(enhance);\n  last = obj;\n  return obj;\n}\n\nexports.predict = predict;\nexports.loadAge = loadAge;\nexports.loadGender = loadGender;\n", "const tf = require('@tensorflow/tfjs');\n\nconst annotations = ['angry', 'discust', 'fear', 'happy', 'sad', 'surpise', 'neutral'];\nconst models = {};\nlet last = [];\nlet frame = 0;\nconst multiplier = 1.5;\n\nasync function load(config) {\n  if (!models.emotion) models.emotion = await tf.loadGraphModel(config.face.emotion.modelPath);\n  return models.emotion;\n}\n\nasync function predict(image, config) {\n  if (frame < config.face.emotion.skipFrames) {\n    frame += 1;\n    return last;\n  }\n  frame = 0;\n  const resize = tf.image.resizeBilinear(image, [config.face.emotion.inputSize, config.face.emotion.inputSize], false);\n  const [red, green, blue] = tf.split(resize, 3, 3);\n  resize.dispose();\n  // weighted rgb to grayscale: https://www.mathworks.com/help/matlab/ref/rgb2gray.html\n  const redNorm = tf.mul(red, [0.2989]);\n  const greenNorm = tf.mul(green, [0.5870]);\n  const blueNorm = tf.mul(blue, [0.1140]);\n  red.dispose();\n  green.dispose();\n  blue.dispose();\n  const grayscale = tf.addN([redNorm, greenNorm, blueNorm]);\n  redNorm.dispose();\n  greenNorm.dispose();\n  blueNorm.dispose();\n  const obj = [];\n  if (config.face.emotion.enabled) {\n    const emotionT = await models.emotion.predict(grayscale);\n    const data = await emotionT.data();\n    for (let i = 0; i < data.length; i++) {\n      if (multiplier * data[i] > config.face.emotion.minConfidence) obj.push({ score: Math.min(0.99, Math.trunc(100 * multiplier * data[i]) / 100), emotion: annotations[i] });\n    }\n    obj.sort((a, b) => b.score - a.score);\n    tf.dispose(emotionT);\n  }\n  tf.dispose(grayscale);\n  last = obj;\n  return obj;\n}\n\nexports.predict = predict;\nexports.load = load;\n", "const tf = require('@tensorflow/tfjs');\n\nclass BaseModel {\n  constructor(model, outputStride) {\n    this.model = model;\n    this.outputStride = outputStride;\n    const inputShape = this.model.inputs[0].shape;\n    tf.util.assert((inputShape[1] === -1) && (inputShape[2] === -1), () => `Input shape [${inputShape[1]}, ${inputShape[2]}] must both be equal to or -1`);\n  }\n\n  /**\n     * Predicts intermediate Tensor representations.\n     *\n     * @param input The input RGB image of the base model.\n     * A Tensor of shape: [`inputResolution`, `inputResolution`, 3].\n     *\n     * @return A dictionary of base model's intermediate predictions.\n     * The returned dictionary should contains the following elements:\n     * heatmapScores: A Tensor3D that represents the heatmapScores.\n     * offsets: A Tensor3D that represents the offsets.\n     * displacementFwd: A Tensor3D that represents the forward displacement.\n     * displacementBwd: A Tensor3D that represents the backward displacement.\n     */\n  predict(input) {\n    return tf.tidy(() => {\n      const asFloat = this.preprocessInput(input.toFloat());\n      const asBatch = asFloat.expandDims(0);\n      const results = this.model.predict(asBatch);\n      const results3d = results.map((y) => y.squeeze([0]));\n      const namedResults = this.nameOutputResults(results3d);\n      return {\n        heatmapScores: namedResults.heatmap.sigmoid(),\n        offsets: namedResults.offsets,\n        displacementFwd: namedResults.displacementFwd,\n        displacementBwd: namedResults.displacementBwd,\n      };\n    });\n  }\n\n  /**\n     * Releases the CPU and GPU memory allocated by the model.\n     */\n  dispose() {\n    this.model.dispose();\n  }\n}\nexports.BaseModel = BaseModel;\n", "const tf = require('@tensorflow/tfjs');\nconst modelBase = require('./modelBase');\n\nclass MobileNet extends modelBase.BaseModel {\n  // eslint-disable-next-line class-methods-use-this\n  preprocessInput(input) {\n    // Normalize the pixels [0, 255] to be between [-1, 1].\n    return tf.tidy(() => tf.div(input, 127.5).sub(1.0));\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  nameOutputResults(results) {\n    const [offsets, heatmap, displacementFwd, displacementBwd] = results;\n    return { offsets, heatmap, displacementFwd, displacementBwd };\n  }\n}\nexports.MobileNet = MobileNet;\n", "// algorithm based on Coursera Lecture from Algorithms, Part 1: https://www.coursera.org/learn/algorithms-part1/lecture/ZjoSM/heapsort\nfunction half(k) {\n  return Math.floor(k / 2);\n}\nclass MaxHeap {\n  constructor(maxSize, getElementValue) {\n    this.priorityQueue = new Array(maxSize);\n    this.numberOfElements = -1;\n    this.getElementValue = getElementValue;\n  }\n\n  enqueue(x) {\n    this.priorityQueue[++this.numberOfElements] = x;\n    this.swim(this.numberOfElements);\n  }\n\n  dequeue() {\n    const max = this.priorityQueue[0];\n    this.exchange(0, this.numberOfElements--);\n    this.sink(0);\n    this.priorityQueue[this.numberOfElements + 1] = null;\n    return max;\n  }\n\n  empty() {\n    return this.numberOfElements === -1;\n  }\n\n  size() {\n    return this.numberOfElements + 1;\n  }\n\n  all() {\n    return this.priorityQueue.slice(0, this.numberOfElements + 1);\n  }\n\n  max() {\n    return this.priorityQueue[0];\n  }\n\n  swim(k) {\n    while (k > 0 && this.less(half(k), k)) {\n      this.exchange(k, half(k));\n      k = half(k);\n    }\n  }\n\n  sink(k) {\n    while (2 * k <= this.numberOfElements) {\n      let j = 2 * k;\n      if (j < this.numberOfElements && this.less(j, j + 1)) j++;\n      if (!this.less(k, j)) break;\n      this.exchange(k, j);\n      k = j;\n    }\n  }\n\n  getValueAt(i) {\n    return this.getElementValue(this.priorityQueue[i]);\n  }\n\n  less(i, j) {\n    return this.getValueAt(i) < this.getValueAt(j);\n  }\n\n  exchange(i, j) {\n    const t = this.priorityQueue[i];\n    this.priorityQueue[i] = this.priorityQueue[j];\n    this.priorityQueue[j] = t;\n  }\n}\nexports.MaxHeap = MaxHeap;\n", "const heapSort = require('./heapSort');\n\nfunction scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, localMaximumRadius, scores) {\n  const [height, width] = scores.shape;\n  let localMaximum = true;\n  const yStart = Math.max(heatmapY - localMaximumRadius, 0);\n  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\n  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\n    const xStart = Math.max(heatmapX - localMaximumRadius, 0);\n    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\n    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\n      if (scores.get(yCurrent, xCurrent, keypointId) > score) {\n        localMaximum = false;\n        break;\n      }\n    }\n    if (!localMaximum) {\n      break;\n    }\n  }\n  return localMaximum;\n}\n/**\n * Builds a priority queue with part candidate positions for a specific image in\n * the batch. For this we find all local maxima in the score maps with score\n * values above a threshold. We create a single priority queue across all parts.\n */\nfunction buildPartWithScoreQueue(scoreThreshold, localMaximumRadius, scores) {\n  const [height, width, numKeypoints] = scores.shape;\n  const queue = new heapSort.MaxHeap(height * width * numKeypoints, ({ score }) => score);\n  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {\n    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {\n      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {\n        const score = scores.get(heatmapY, heatmapX, keypointId);\n        // Only consider parts with score greater or equal to threshold as root candidates.\n        if (score < scoreThreshold) continue;\n        // Only consider keypoints whose score is maximum in a local window.\n        if (scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, localMaximumRadius, scores)) {\n          queue.enqueue({ score, part: { heatmapY, heatmapX, id: keypointId } });\n        }\n      }\n    }\n  }\n  return queue;\n}\nexports.buildPartWithScoreQueue = buildPartWithScoreQueue;\n", "exports.partNames = [\n  'nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder',\n  'rightShoulder', 'leftElbow', 'rightElbow', 'leftWrist', 'rightWrist',\n  'leftHip', 'rightHip', 'leftKnee', 'rightKnee', 'leftAnkle', 'rightAnkle',\n];\nexports.NUM_KEYPOINTS = exports.partNames.length;\nexports.partIds = exports.partNames.reduce((result, jointName, i) => {\n  result[jointName] = i;\n  return result;\n}, {});\nconst connectedPartNames = [\n  ['leftHip', 'leftShoulder'], ['leftElbow', 'leftShoulder'],\n  ['leftElbow', 'leftWrist'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['rightHip', 'rightShoulder'],\n  ['rightElbow', 'rightShoulder'], ['rightElbow', 'rightWrist'],\n  ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle'],\n  ['leftShoulder', 'rightShoulder'], ['leftHip', 'rightHip'],\n];\n/*\n * Define the skeleton. This defines the parent->child relationships of our\n * tree. Arbitrarily this defines the nose as the root of the tree, however\n * since we will infer the displacement for both parent->child and\n * child->parent, we can define the tree root as any node.\n */\nexports.poseChain = [\n  ['nose', 'leftEye'], ['leftEye', 'leftEar'], ['nose', 'rightEye'],\n  ['rightEye', 'rightEar'], ['nose', 'leftShoulder'],\n  ['leftShoulder', 'leftElbow'], ['leftElbow', 'leftWrist'],\n  ['leftShoulder', 'leftHip'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['nose', 'rightShoulder'],\n  ['rightShoulder', 'rightElbow'], ['rightElbow', 'rightWrist'],\n  ['rightShoulder', 'rightHip'], ['rightHip', 'rightKnee'],\n  ['rightKnee', 'rightAnkle'],\n];\nexports.connectedPartIndices = connectedPartNames.map(([jointNameA, jointNameB]) => ([exports.partIds[jointNameA], exports.partIds[jointNameB]]));\nexports.partChannels = [\n  'left_face',\n  'right_face',\n  'right_upper_leg_front',\n  'right_lower_leg_back',\n  'right_upper_leg_back',\n  'left_lower_leg_front',\n  'left_upper_leg_front',\n  'left_upper_leg_back',\n  'left_lower_leg_back',\n  'right_feet',\n  'right_lower_leg_front',\n  'left_feet',\n  'torso_front',\n  'torso_back',\n  'right_upper_arm_front',\n  'right_upper_arm_back',\n  'right_lower_arm_back',\n  'left_lower_arm_front',\n  'left_upper_arm_front',\n  'left_upper_arm_back',\n  'left_lower_arm_back',\n  'right_hand',\n  'right_lower_arm_front',\n  'left_hand',\n];\n", "const kpt = require('./keypoints');\n\nfunction getOffsetPoint(y, x, keypoint, offsets) {\n  return {\n    y: offsets.get(y, x, keypoint),\n    x: offsets.get(y, x, keypoint + kpt.NUM_KEYPOINTS),\n  };\n}\nexports.getOffsetPoint = getOffsetPoint;\n\nfunction getImageCoords(part, outputStride, offsets) {\n  const { heatmapY, heatmapX, id: keypoint } = part;\n  const { y, x } = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);\n  return {\n    x: part.heatmapX * outputStride + x,\n    y: part.heatmapY * outputStride + y,\n  };\n}\nexports.getImageCoords = getImageCoords;\n\nfunction fillArray(element, size) {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = element;\n  }\n  return result;\n}\nexports.fillArray = fillArray;\n\nfunction clamp(a, min, max) {\n  if (a < min) return min;\n  if (a > max) return max;\n  return a;\n}\nexports.clamp = clamp;\n\nfunction squaredDistance(y1, x1, y2, x2) {\n  const dy = y2 - y1;\n  const dx = x2 - x1;\n  return dy * dy + dx * dx;\n}\nexports.squaredDistance = squaredDistance;\n\nfunction addVectors(a, b) {\n  return { x: a.x + b.x, y: a.y + b.y };\n}\nexports.addVectors = addVectors;\n\nfunction clampVector(a, min, max) {\n  return { y: clamp(a.y, min, max), x: clamp(a.x, min, max) };\n}\nexports.clampVector = clampVector;\n", "const keypoints = require('./keypoints');\nconst vectors = require('./vectors');\n\nconst parentChildrenTuples = keypoints.poseChain.map(([parentJoinName, childJoinName]) => ([keypoints.partIds[parentJoinName], keypoints.partIds[childJoinName]]));\nconst parentToChildEdges = parentChildrenTuples.map(([, childJointId]) => childJointId);\nconst childToParentEdges = parentChildrenTuples.map(([parentJointId]) => parentJointId);\nfunction getDisplacement(edgeId, point, displacements) {\n  const numEdges = displacements.shape[2] / 2;\n  return {\n    y: displacements.get(point.y, point.x, edgeId),\n    x: displacements.get(point.y, point.x, numEdges + edgeId),\n  };\n}\nfunction getStridedIndexNearPoint(point, outputStride, height, width) {\n  return {\n    y: vectors.clamp(Math.round(point.y / outputStride), 0, height - 1),\n    x: vectors.clamp(Math.round(point.x / outputStride), 0, width - 1),\n  };\n}\n/**\n * We get a new keypoint along the `edgeId` for the pose instance, assuming\n * that the position of the `idSource` part is already known. For this, we\n * follow the displacement vector from the source to target part (stored in\n * the `i`-t channel of the displacement tensor). The displaced keypoint\n * vector is refined using the offset vector by `offsetRefineStep` times.\n */\nfunction traverseToTargetKeypoint(edgeId, sourceKeypoint, targetKeypointId, scoresBuffer, offsets, outputStride, displacements, offsetRefineStep = 2) {\n  const [height, width] = scoresBuffer.shape;\n  // Nearest neighbor interpolation for the source->target displacements.\n  const sourceKeypointIndices = getStridedIndexNearPoint(sourceKeypoint.position, outputStride, height, width);\n  const displacement = getDisplacement(edgeId, sourceKeypointIndices, displacements);\n  const displacedPoint = vectors.addVectors(sourceKeypoint.position, displacement);\n  let targetKeypoint = displacedPoint;\n  for (let i = 0; i < offsetRefineStep; i++) {\n    const targetKeypointIndices = getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n    const offsetPoint = vectors.getOffsetPoint(targetKeypointIndices.y, targetKeypointIndices.x, targetKeypointId, offsets);\n    targetKeypoint = vectors.addVectors({\n      x: targetKeypointIndices.x * outputStride,\n      y: targetKeypointIndices.y * outputStride,\n    }, { x: offsetPoint.x, y: offsetPoint.y });\n  }\n  const targetKeyPointIndices = getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n  const score = scoresBuffer.get(targetKeyPointIndices.y, targetKeyPointIndices.x, targetKeypointId);\n  return { position: targetKeypoint, part: keypoints.partNames[targetKeypointId], score };\n}\n/**\n * Follows the displacement fields to decode the full pose of the object\n * instance given the position of a part that acts as root.\n *\n * @return An array of decoded keypoints and their scores for a single pose\n */\nfunction decodePose(root, scores, offsets, outputStride, displacementsFwd, displacementsBwd) {\n  const numParts = scores.shape[2];\n  const numEdges = parentToChildEdges.length;\n  const instanceKeypoints = new Array(numParts);\n  // Start a new detection instance at the position of the root.\n  const { part: rootPart, score: rootScore } = root;\n  const rootPoint = vectors.getImageCoords(rootPart, outputStride, offsets);\n  instanceKeypoints[rootPart.id] = {\n    score: rootScore,\n    part: keypoints.partNames[rootPart.id],\n    position: rootPoint,\n  };\n  // Decode the part positions upwards in the tree, following the backward\n  // displacements.\n  for (let edge = numEdges - 1; edge >= 0; --edge) {\n    const sourceKeypointId = parentToChildEdges[edge];\n    const targetKeypointId = childToParentEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] && !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores, offsets, outputStride, displacementsBwd);\n    }\n  }\n  // Decode the part positions downwards in the tree, following the forward\n  // displacements.\n  for (let edge = 0; edge < numEdges; ++edge) {\n    const sourceKeypointId = childToParentEdges[edge];\n    const targetKeypointId = parentToChildEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] && !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores, offsets, outputStride, displacementsFwd);\n    }\n  }\n  return instanceKeypoints;\n}\nexports.decodePose = decodePose;\n", "const buildParts = require('./buildParts');\nconst decodePose = require('./decodePose');\nconst vectors = require('./vectors');\n\nfunction withinNmsRadiusOfCorrespondingPoint(poses, squaredNmsRadius, { x, y }, keypointId) {\n  return poses.some(({ keypoints }) => {\n    const correspondingKeypoint = keypoints[keypointId].position;\n    return vectors.squaredDistance(y, x, correspondingKeypoint.y, correspondingKeypoint.x) <= squaredNmsRadius;\n  });\n}\n/* Score the newly proposed object instance without taking into account\n * the scores of the parts that overlap with any previously detected\n * instance.\n */\nfunction getInstanceScore(existingPoses, squaredNmsRadius, instanceKeypoints) {\n  const notOverlappedKeypointScores = instanceKeypoints.reduce((result, { position, score }, keypointId) => {\n    if (!withinNmsRadiusOfCorrespondingPoint(existingPoses, squaredNmsRadius, position, keypointId)) {\n      result += score;\n    }\n    return result;\n  }, 0.0);\n  return notOverlappedKeypointScores / instanceKeypoints.length;\n}\n// A point (y, x) is considered as root part candidate if its score is a\n// maximum in a window |y - y'| <= kLocalMaximumRadius, |x - x'| <=\n// kLocalMaximumRadius.\nconst kLocalMaximumRadius = 1;\n/**\n * Detects multiple poses and finds their parts from part scores and\n * displacement vectors. It returns up to `maxDetections` object instance\n * detections in decreasing root score order. It works as follows: We first\n * create a priority queue with local part score maxima above\n * `scoreThreshold`, considering all parts at the same time. Then we\n * iteratively pull the top  element of the queue (in decreasing score order)\n * and treat it as a root candidate for a new object instance. To avoid\n * duplicate detections, we reject the root candidate if it is within a disk\n * of `nmsRadius` pixels from the corresponding part of a previously detected\n * instance, which is a form of part-based non-maximum suppression (NMS). If\n * the root candidate passes the NMS check, we start a new object instance\n * detection, treating the corresponding part as root and finding the\n * positions of the remaining parts by following the displacement vectors\n * along the tree-structured part graph. We assign to the newly detected\n * instance a score equal to the sum of scores of its parts which have not\n * been claimed by a previous instance (i.e., those at least `nmsRadius`\n * pixels away from the corresponding part of all previously detected\n * instances), divided by the total number of parts `numParts`.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param displacementsFwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the forward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param displacementsBwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the backward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @param maxPoseDetections Maximum number of returned instance detections per\n * image.\n *\n * @param scoreThreshold Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5.\n *\n * @param nmsRadius Non-maximum suppression part distance. It needs to be\n * strictly positive. Two parts suppress each other if they are less than\n * `nmsRadius` pixels away. Defaults to 20.\n *\n * @return An array of poses and their scores, each containing keypoints and\n * the corresponding keypoint scores.\n */\nfunction decodeMultiplePoses(scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, outputStride, maxPoseDetections, scoreThreshold = 0.5, nmsRadius = 20) {\n  const poses = [];\n  const queue = buildParts.buildPartWithScoreQueue(scoreThreshold, kLocalMaximumRadius, scoresBuffer);\n  const squaredNmsRadius = nmsRadius * nmsRadius;\n  // Generate at most maxDetections object instances per image in\n  // decreasing root part score order.\n  while (poses.length < maxPoseDetections && !queue.empty()) {\n    // The top element in the queue is the next root candidate.\n    const root = queue.dequeue();\n    // Part-based non-maximum suppression: We reject a root candidate if it\n    // is within a disk of `nmsRadius` pixels from the corresponding part of\n    // a previously detected instance.\n    const rootImageCoords = vectors.getImageCoords(root.part, outputStride, offsetsBuffer);\n    if (withinNmsRadiusOfCorrespondingPoint(poses, squaredNmsRadius, rootImageCoords, root.part.id)) continue;\n    // Start a new detection instance at the position of the root.\n    const keypoints = decodePose.decodePose(root, scoresBuffer, offsetsBuffer, outputStride, displacementsFwdBuffer, displacementsBwdBuffer);\n    const score = getInstanceScore(poses, squaredNmsRadius, keypoints);\n    poses.push({ keypoints, score });\n  }\n  return poses;\n}\nexports.decodeMultiplePoses = decodeMultiplePoses;\n", "const kpt = require('./keypoints');\n\nfunction eitherPointDoesntMeetConfidence(a, b, minConfidence) {\n  return (a < minConfidence || b < minConfidence);\n}\n\nfunction getAdjacentKeyPoints(keypoints, minConfidence) {\n  return kpt.connectedPartIndices.reduce((result, [leftJoint, rightJoint]) => {\n    if (eitherPointDoesntMeetConfidence(keypoints[leftJoint].score, keypoints[rightJoint].score, minConfidence)) {\n      return result;\n    }\n    result.push([keypoints[leftJoint], keypoints[rightJoint]]);\n    return result;\n  }, []);\n}\nexports.getAdjacentKeyPoints = getAdjacentKeyPoints;\n\nconst { NEGATIVE_INFINITY, POSITIVE_INFINITY } = Number;\nfunction getBoundingBox(keypoints) {\n  return keypoints.reduce(({ maxX, maxY, minX, minY }, { position: { x, y } }) => ({\n    maxX: Math.max(maxX, x),\n    maxY: Math.max(maxY, y),\n    minX: Math.min(minX, x),\n    minY: Math.min(minY, y),\n  }), {\n    maxX: NEGATIVE_INFINITY,\n    maxY: NEGATIVE_INFINITY,\n    minX: POSITIVE_INFINITY,\n    minY: POSITIVE_INFINITY,\n  });\n}\nexports.getBoundingBox = getBoundingBox;\nfunction getBoundingBoxPoints(keypoints) {\n  const { minX, minY, maxX, maxY } = getBoundingBox(keypoints);\n  return [{ x: minX, y: minY }, { x: maxX, y: minY }, { x: maxX, y: maxY }, { x: minX, y: maxY }];\n}\nexports.getBoundingBoxPoints = getBoundingBoxPoints;\nasync function toTensorBuffers3D(tensors) {\n  return Promise.all(tensors.map((tensor) => tensor.buffer()));\n}\nexports.toTensorBuffers3D = toTensorBuffers3D;\n\nfunction scalePose(pose, scaleY, scaleX) {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(({ score, part, position }) => ({\n      score,\n      part,\n      position: { x: position.x * scaleX, y: position.y * scaleY },\n    })),\n  };\n}\nexports.scalePose = scalePose;\n\nfunction resizeTo(image, [targetH, targetW]) {\n  const input = image.squeeze(0);\n  const resized = input.resizeBilinear([targetH, targetW]);\n  input.dispose();\n  return resized;\n}\nexports.resizeTo = resizeTo;\n\nfunction scaleAndFlipPoses(poses, [height, width], [inputResolutionHeight, inputResolutionWidth]) {\n  const scaledPoses = poses.map((pose) => scalePose(pose, height / inputResolutionHeight, width / inputResolutionWidth));\n  return scaledPoses;\n}\nexports.scaleAndFlipPoses = scaleAndFlipPoses;\n", "const tf = require('@tensorflow/tfjs');\nconst modelMobileNet = require('./modelMobileNet');\nconst decodeMultiple = require('./decodeMultiple');\nconst util = require('./util');\n\nclass PoseNet {\n  constructor(net) {\n    this.baseModel = net;\n  }\n\n  /**\n     * Infer through PoseNet, and estimates multiple poses using the outputs.\n     * This does standard ImageNet pre-processing before inferring through the\n     * model. The image should pixels should have values [0-255]. It detects\n     * multiple poses and finds their parts from part scores and displacement\n     * vectors using a fast greedy decoding algorithm.  It returns up to\n     * `config.maxDetections` object instance detections in decreasing root\n     * score order.\n     *\n     * @param input\n     * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n     * image to feed through the network.\n     *\n     * @param config MultiPoseEstimationConfig object that contains parameters\n     * for the PoseNet inference using multiple pose estimation.\n     *\n     * @return An array of poses and their scores, each containing keypoints and\n     * the corresponding keypoint scores.  The positions of the keypoints are\n     * in the same scale as the original image\n     */\n  async estimatePoses(input, config) {\n    const outputStride = config.outputStride;\n    // const inputResolution = config.inputResolution;\n    const height = input.shape[1];\n    const width = input.shape[2];\n    const resized = util.resizeTo(input, [config.inputResolution, config.inputResolution]);\n    const { heatmapScores, offsets, displacementFwd, displacementBwd } = this.baseModel.predict(resized);\n    const allTensorBuffers = await util.toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd]);\n    const scoresBuffer = allTensorBuffers[0];\n    const offsetsBuffer = allTensorBuffers[1];\n    const displacementsFwdBuffer = allTensorBuffers[2];\n    const displacementsBwdBuffer = allTensorBuffers[3];\n    const poses = await decodeMultiple.decodeMultiplePoses(scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\n    const resultPoses = util.scaleAndFlipPoses(poses, [height, width], [config.inputResolution, config.inputResolution]);\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n    resized.dispose();\n    return resultPoses;\n  }\n\n  dispose() {\n    this.baseModel.dispose();\n  }\n}\nexports.PoseNet = PoseNet;\nasync function loadMobileNet(config) {\n  const graphModel = await tf.loadGraphModel(config.modelPath);\n  const mobilenet = new modelMobileNet.MobileNet(graphModel, config.outputStride);\n  return new PoseNet(mobilenet);\n}\n/**\n * Loads the PoseNet model instance from a checkpoint, with the MobileNet architecture. The model to be loaded is configurable using the\n * config dictionary ModelConfig. Please find more details in the documentation of the ModelConfig.\n *\n * @param config ModelConfig dictionary that contains parameters for\n * the PoseNet loading process. Please find more details of each parameters\n * in the documentation of the ModelConfig interface. The predefined\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\n * for defining your customized config.\n */\nasync function load(config) {\n  return loadMobileNet(config);\n}\nexports.load = load;\n", "const modelMobileNet = require('./modelMobileNet');\nconst modelPoseNet = require('./modelPoseNet');\nconst decodeMultiple = require('./decodeMultiple');\nconst keypoints = require('./keypoints');\nconst util = require('./util');\n\nexports.load = modelPoseNet.load;\nexports.PoseNet = modelPoseNet.PoseNet;\n\nexports.MobileNet = modelMobileNet.MobileNet;\nexports.decodeMultiplePoses = decodeMultiple.decodeMultiplePoses;\nexports.partChannels = keypoints.partChannels;\nexports.partIds = keypoints.partIds;\nexports.partNames = keypoints.partNames;\nexports.poseChain = keypoints.poseChain;\nexports.getAdjacentKeyPoints = util.getAdjacentKeyPoints;\nexports.getBoundingBox = util.getBoundingBox;\nexports.getBoundingBoxPoints = util.getBoundingBoxPoints;\nexports.scaleAndFlipPoses = util.scaleAndFlipPoses;\nexports.scalePose = util.scalePose;\n", "const tf = require('@tensorflow/tfjs');\n\nfunction getBoxSize(box) {\n  return [\n    Math.abs(box.endPoint[0] - box.startPoint[0]),\n    Math.abs(box.endPoint[1] - box.startPoint[1]),\n  ];\n}\nexports.getBoxSize = getBoxSize;\n\nfunction getBoxCenter(box) {\n  return [\n    box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2,\n    box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2,\n  ];\n}\nexports.getBoxCenter = getBoxCenter;\n\nfunction cutBoxFromImageAndResize(box, image, cropSize) {\n  const h = image.shape[1];\n  const w = image.shape[2];\n  const boxes = [[\n    box.startPoint[1] / h, box.startPoint[0] / w, box.endPoint[1] / h,\n    box.endPoint[0] / w,\n  ]];\n  return tf.image.cropAndResize(image, boxes, [0], cropSize);\n}\nexports.cutBoxFromImageAndResize = cutBoxFromImageAndResize;\n\nfunction scaleBoxCoordinates(box, factor) {\n  const startPoint = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]];\n  const endPoint = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]];\n  const palmLandmarks = box.palmLandmarks.map((coord) => {\n    const scaledCoord = [coord[0] * factor[0], coord[1] * factor[1]];\n    return scaledCoord;\n  });\n  return { startPoint, endPoint, palmLandmarks };\n}\nexports.scaleBoxCoordinates = scaleBoxCoordinates;\n\nfunction enlargeBox(box, factor = 1.5) {\n  const center = getBoxCenter(box);\n  const size = getBoxSize(box);\n  const newHalfSize = [factor * size[0] / 2, factor * size[1] / 2];\n  const startPoint = [center[0] - newHalfSize[0], center[1] - newHalfSize[1]];\n  const endPoint = [center[0] + newHalfSize[0], center[1] + newHalfSize[1]];\n  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };\n}\nexports.enlargeBox = enlargeBox;\n\nfunction squarifyBox(box) {\n  const centers = getBoxCenter(box);\n  const size = getBoxSize(box);\n  const maxEdge = Math.max(...size);\n  const halfSize = maxEdge / 2;\n  const startPoint = [centers[0] - halfSize, centers[1] - halfSize];\n  const endPoint = [centers[0] + halfSize, centers[1] + halfSize];\n  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };\n}\nexports.squarifyBox = squarifyBox;\n\nfunction shiftBox(box, shiftFactor) {\n  const boxSize = [\n    box.endPoint[0] - box.startPoint[0], box.endPoint[1] - box.startPoint[1],\n  ];\n  const shiftVector = [boxSize[0] * shiftFactor[0], boxSize[1] * shiftFactor[1]];\n  const startPoint = [box.startPoint[0] + shiftVector[0], box.startPoint[1] + shiftVector[1]];\n  const endPoint = [box.endPoint[0] + shiftVector[0], box.endPoint[1] + shiftVector[1]];\n  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };\n}\nexports.shiftBox = shiftBox;\n", "const tf = require('@tensorflow/tfjs');\nconst bounding = require('./box');\n\nclass HandDetector {\n  constructor(model, anchors, config) {\n    this.model = model;\n    this.width = config.inputSize;\n    this.height = config.inputSize;\n    this.anchors = anchors.map((anchor) => [anchor.x_center, anchor.y_center]);\n    this.anchorsTensor = tf.tensor2d(this.anchors);\n    this.inputSizeTensor = tf.tensor1d([config.inputSize, config.inputSize]);\n    this.doubleInputSizeTensor = tf.tensor1d([config.inputSize * 2, config.inputSize * 2]);\n  }\n\n  normalizeBoxes(boxes) {\n    return tf.tidy(() => {\n      const boxOffsets = tf.slice(boxes, [0, 0], [-1, 2]);\n      const boxSizes = tf.slice(boxes, [0, 2], [-1, 2]);\n      const boxCenterPoints = tf.add(tf.div(boxOffsets, this.inputSizeTensor), this.anchorsTensor);\n      const halfBoxSizes = tf.div(boxSizes, this.doubleInputSizeTensor);\n      const startPoints = tf.mul(tf.sub(boxCenterPoints, halfBoxSizes), this.inputSizeTensor);\n      const endPoints = tf.mul(tf.add(boxCenterPoints, halfBoxSizes), this.inputSizeTensor);\n      return tf.concat2d([startPoints, endPoints], 1);\n    });\n  }\n\n  normalizeLandmarks(rawPalmLandmarks, index) {\n    return tf.tidy(() => {\n      const landmarks = tf.add(tf.div(rawPalmLandmarks.reshape([-1, 7, 2]), this.inputSizeTensor), this.anchors[index]);\n      return tf.mul(landmarks, this.inputSizeTensor);\n    });\n  }\n\n  async getBoundingBoxes(input) {\n    const batchedPrediction = this.model.predict(input);\n    const prediction = batchedPrediction.squeeze();\n    // Regression score for each anchor point.\n    const scores = tf.tidy(() => tf.sigmoid(tf.slice(prediction, [0, 0], [-1, 1])).squeeze());\n    // Bounding box for each anchor point.\n    const rawBoxes = tf.slice(prediction, [0, 1], [-1, 4]);\n    const boxes = this.normalizeBoxes(rawBoxes);\n    const boxesWithHandsTensor = await tf.image.nonMaxSuppressionAsync(boxes, scores, this.maxHands, this.iouThreshold, this.scoreThreshold);\n    const boxesWithHands = await boxesWithHandsTensor.array();\n    const toDispose = [batchedPrediction, boxesWithHandsTensor, prediction, boxes, rawBoxes, scores];\n    const detectedHands = tf.tidy(() => {\n      const detectedBoxes = [];\n      for (const i in boxesWithHands) {\n        const boxIndex = boxesWithHands[i];\n        const matchingBox = tf.slice(boxes, [boxIndex, 0], [1, -1]);\n        const rawPalmLandmarks = tf.slice(prediction, [boxIndex, 5], [1, 14]);\n        const palmLandmarks = tf.tidy(() => this.normalizeLandmarks(rawPalmLandmarks, boxIndex).reshape([-1, 2]));\n        detectedBoxes.push({ boxes: matchingBox, palmLandmarks });\n      }\n      return detectedBoxes;\n    });\n    toDispose.forEach((tensor) => tensor.dispose());\n    return detectedHands;\n  }\n\n  /**\n     * Returns a Box identifying the bounding box of a hand within the image.\n     * Returns null if there is no hand in the image.\n     *\n     * @param input The image to classify.\n     */\n  async estimateHandBounds(input, config) {\n    // const inputHeight = input.shape[2];\n    // const inputWidth = input.shape[1];\n    this.iouThreshold = config.iouThreshold;\n    this.scoreThreshold = config.scoreThreshold;\n    this.maxHands = config.maxHands;\n    const resized = input.resizeBilinear([this.width, this.height]);\n    const divided = resized.div(255);\n    const normalized = divided.sub(0.5);\n    const image = normalized.mul(2.0);\n    resized.dispose();\n    divided.dispose();\n    normalized.dispose();\n    const predictions = await this.getBoundingBoxes(image);\n    image.dispose();\n    if (!predictions || (predictions.length === 0)) return null;\n    const hands = [];\n    for (const i in predictions) {\n      const prediction = predictions[i];\n      const boundingBoxes = await prediction.boxes.array();\n      const startPoint = boundingBoxes[0].slice(0, 2);\n      const endPoint = boundingBoxes[0].slice(2, 4);\n      const palmLandmarks = await prediction.palmLandmarks.array();\n      prediction.boxes.dispose();\n      prediction.palmLandmarks.dispose();\n      hands.push(bounding.scaleBoxCoordinates({ startPoint, endPoint, palmLandmarks }, [input.shape[2] / this.width, input.shape[1] / this.height]));\n    }\n    return hands;\n  }\n}\nexports.HandDetector = HandDetector;\n", "exports.MESH_ANNOTATIONS = {\n  thumb: [1, 2, 3, 4],\n  indexFinger: [5, 6, 7, 8],\n  middleFinger: [9, 10, 11, 12],\n  ringFinger: [13, 14, 15, 16],\n  pinky: [17, 18, 19, 20],\n  palmBase: [0],\n};\n", "function normalizeRadians(angle) {\n  return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));\n}\nexports.normalizeRadians = normalizeRadians;\n\nfunction computeRotation(point1, point2) {\n  const radians = Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]);\n  return normalizeRadians(radians);\n}\nexports.computeRotation = computeRotation;\n\nconst buildTranslationMatrix = (x, y) => ([[1, 0, x], [0, 1, y], [0, 0, 1]]);\nfunction dot(v1, v2) {\n  let product = 0;\n  for (let i = 0; i < v1.length; i++) {\n    product += v1[i] * v2[i];\n  }\n  return product;\n}\nexports.dot = dot;\n\nfunction getColumnFrom2DArr(arr, columnIndex) {\n  const column = [];\n  for (let i = 0; i < arr.length; i++) {\n    column.push(arr[i][columnIndex]);\n  }\n  return column;\n}\nexports.getColumnFrom2DArr = getColumnFrom2DArr;\n\nfunction multiplyTransformMatrices(mat1, mat2) {\n  const product = [];\n  const size = mat1.length;\n  for (let row = 0; row < size; row++) {\n    product.push([]);\n    for (let col = 0; col < size; col++) {\n      product[row].push(dot(mat1[row], getColumnFrom2DArr(mat2, col)));\n    }\n  }\n  return product;\n}\nfunction buildRotationMatrix(rotation, center) {\n  const cosA = Math.cos(rotation);\n  const sinA = Math.sin(rotation);\n  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];\n  const translationMatrix = buildTranslationMatrix(center[0], center[1]);\n  const translationTimesRotation = multiplyTransformMatrices(translationMatrix, rotationMatrix);\n  const negativeTranslationMatrix = buildTranslationMatrix(-center[0], -center[1]);\n  return multiplyTransformMatrices(translationTimesRotation, negativeTranslationMatrix);\n}\nexports.buildRotationMatrix = buildRotationMatrix;\n\nfunction invertTransformMatrix(matrix) {\n  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];\n  const translationComponent = [matrix[0][2], matrix[1][2]];\n  const invertedTranslation = [\n    -dot(rotationComponent[0], translationComponent),\n    -dot(rotationComponent[1], translationComponent),\n  ];\n  return [\n    rotationComponent[0].concat(invertedTranslation[0]),\n    rotationComponent[1].concat(invertedTranslation[1]),\n    [0, 0, 1],\n  ];\n}\nexports.invertTransformMatrix = invertTransformMatrix;\n\nfunction rotatePoint(homogeneousCoordinate, rotationMatrix) {\n  return [\n    dot(homogeneousCoordinate, rotationMatrix[0]),\n    dot(homogeneousCoordinate, rotationMatrix[1]),\n  ];\n}\nexports.rotatePoint = rotatePoint;\n", "const tf = require('@tensorflow/tfjs');\nconst bounding = require('./box');\nconst util = require('./util');\n\nconst UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD = 0.8;\nconst PALM_BOX_SHIFT_VECTOR = [0, -0.4];\nconst HAND_BOX_SHIFT_VECTOR = [0, -0.1];\nconst HAND_BOX_ENLARGE_FACTOR = 1.65;\nconst PALM_LANDMARK_IDS = [0, 5, 9, 13, 17, 1, 2];\nconst PALM_LANDMARKS_INDEX_OF_PALM_BASE = 0;\nconst PALM_LANDMARKS_INDEX_OF_MIDDLE_FINGER_BASE = 2;\n\n// The Pipeline coordinates between the bounding box and skeleton models.\nclass HandPipeline {\n  constructor(boundingBoxDetector, meshDetector, config) {\n    this.regionsOfInterest = [];\n    this.runsWithoutHandDetector = 0;\n    this.boundingBoxDetector = boundingBoxDetector;\n    this.meshDetector = meshDetector;\n    this.meshWidth = config.inputSize;\n    this.meshHeight = config.inputSize;\n    this.enlargeFactor = config.enlargeFactor;\n  }\n\n  // Get the bounding box surrounding the hand, given palm landmarks.\n  getBoxForPalmLandmarks(palmLandmarks, rotationMatrix) {\n    const rotatedPalmLandmarks = palmLandmarks.map((coord) => {\n      const homogeneousCoordinate = [...coord, 1];\n      return util.rotatePoint(homogeneousCoordinate, rotationMatrix);\n    });\n    const boxAroundPalm = this.calculateLandmarksBoundingBox(rotatedPalmLandmarks);\n    // boxAroundPalm only surrounds the palm - therefore we shift it\n    // upwards so it will capture fingers once enlarged + squarified.\n    return bounding.enlargeBox(bounding.squarifyBox(bounding.shiftBox(boxAroundPalm, PALM_BOX_SHIFT_VECTOR)), this.enlargeFactor);\n  }\n\n  // Get the bounding box surrounding the hand, given all hand landmarks.\n  getBoxForHandLandmarks(landmarks) {\n    // The MediaPipe hand mesh model is trained on hands with empty space\n    // around them, so we still need to shift / enlarge boxAroundHand even\n    // though it surrounds the entire hand.\n    const boundingBox = this.calculateLandmarksBoundingBox(landmarks);\n    const boxAroundHand = bounding.enlargeBox(bounding.squarifyBox(bounding.shiftBox(boundingBox, HAND_BOX_SHIFT_VECTOR)), HAND_BOX_ENLARGE_FACTOR);\n    const palmLandmarks = [];\n    for (let i = 0; i < PALM_LANDMARK_IDS.length; i++) {\n      palmLandmarks.push(landmarks[PALM_LANDMARK_IDS[i]].slice(0, 2));\n    }\n    boxAroundHand.palmLandmarks = palmLandmarks;\n    return boxAroundHand;\n  }\n\n  // Scale, rotate, and translate raw keypoints from the model so they map to\n  // the input coordinates.\n  transformRawCoords(rawCoords, box, angle, rotationMatrix) {\n    const boxSize = bounding.getBoxSize(box);\n    const scaleFactor = [boxSize[0] / this.meshWidth, boxSize[1] / this.meshHeight];\n    const coordsScaled = rawCoords.map((coord) => [\n      scaleFactor[0] * (coord[0] - this.meshWidth / 2),\n      scaleFactor[1] * (coord[1] - this.meshHeight / 2), coord[2],\n    ]);\n    const coordsRotationMatrix = util.buildRotationMatrix(angle, [0, 0]);\n    const coordsRotated = coordsScaled.map((coord) => {\n      const rotated = util.rotatePoint(coord, coordsRotationMatrix);\n      return [...rotated, coord[2]];\n    });\n    const inverseRotationMatrix = util.invertTransformMatrix(rotationMatrix);\n    const boxCenter = [...bounding.getBoxCenter(box), 1];\n    const originalBoxCenter = [\n      util.dot(boxCenter, inverseRotationMatrix[0]),\n      util.dot(boxCenter, inverseRotationMatrix[1]),\n    ];\n    return coordsRotated.map((coord) => [\n      coord[0] + originalBoxCenter[0], coord[1] + originalBoxCenter[1],\n      coord[2],\n    ]);\n  }\n\n  async estimateHands(image, config) {\n    this.skipFrames = config.skipFrames;\n    this.detectionConfidence = config.minConfidence;\n    this.maxHands = config.maxHands;\n    this.runsWithoutHandDetector++;\n    const useFreshBox = this.shouldUpdateRegionsOfInterest();\n    if (useFreshBox === true) {\n      const boundingBoxPredictions = await this.boundingBoxDetector.estimateHandBounds(image, config);\n      this.regionsOfInterest = [];\n      for (const i in boundingBoxPredictions) {\n        this.updateRegionsOfInterest(boundingBoxPredictions[i], true /* force update */, i);\n      }\n      this.runsWithoutHandDetector = 0;\n    }\n    // Rotate input so the hand is vertically oriented.\n    const hands = [];\n    if (!this.regionsOfInterest) return hands;\n    for (const i in this.regionsOfInterest) {\n      const currentBox = this.regionsOfInterest[i][0];\n      if (!currentBox) return hands;\n      const angle = util.computeRotation(currentBox.palmLandmarks[PALM_LANDMARKS_INDEX_OF_PALM_BASE], currentBox.palmLandmarks[PALM_LANDMARKS_INDEX_OF_MIDDLE_FINGER_BASE]);\n      const palmCenter = bounding.getBoxCenter(currentBox);\n      const palmCenterNormalized = [palmCenter[0] / image.shape[2], palmCenter[1] / image.shape[1]];\n      const rotatedImage = tf.image.rotateWithOffset(image, angle, 0, palmCenterNormalized);\n      const rotationMatrix = util.buildRotationMatrix(-angle, palmCenter);\n      const box = useFreshBox ? this.getBoxForPalmLandmarks(currentBox.palmLandmarks, rotationMatrix) : currentBox;\n      const croppedInput = bounding.cutBoxFromImageAndResize(box, rotatedImage, [this.meshWidth, this.meshHeight]);\n      const handImage = croppedInput.div(255);\n      croppedInput.dispose();\n      rotatedImage.dispose();\n      const prediction = this.meshDetector.predict(handImage);\n      const [flag, keypoints] = prediction;\n      handImage.dispose();\n      const flagValue = flag.dataSync()[0];\n      flag.dispose();\n      if (flagValue < config.minConfidence) {\n        keypoints.dispose();\n        this.regionsOfInterest[i] = [];\n        return hands;\n      }\n      const keypointsReshaped = tf.reshape(keypoints, [-1, 3]);\n      const rawCoords = await keypointsReshaped.array();\n      keypoints.dispose();\n      keypointsReshaped.dispose();\n      const coords = this.transformRawCoords(rawCoords, box, angle, rotationMatrix);\n      const nextBoundingBox = this.getBoxForHandLandmarks(coords);\n      this.updateRegionsOfInterest(nextBoundingBox, false /* force replace */, i);\n      const result = {\n        landmarks: coords,\n        confidence: flagValue,\n        box: {\n          topLeft: nextBoundingBox.startPoint,\n          bottomRight: nextBoundingBox.endPoint,\n        },\n      };\n      hands.push(result);\n    }\n    return hands;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  calculateLandmarksBoundingBox(landmarks) {\n    const xs = landmarks.map((d) => d[0]);\n    const ys = landmarks.map((d) => d[1]);\n    const startPoint = [Math.min(...xs), Math.min(...ys)];\n    const endPoint = [Math.max(...xs), Math.max(...ys)];\n    return { startPoint, endPoint };\n  }\n\n  // Updates regions of interest if the intersection over union between\n  // the incoming and previous regions falls below a threshold.\n  updateRegionsOfInterest(box, forceUpdate, index) {\n    if (forceUpdate) {\n      this.regionsOfInterest[index] = [box];\n    } else {\n      const previousBox = this.regionsOfInterest[index][0];\n      let iou = 0;\n      if (previousBox != null && previousBox.startPoint != null) {\n        const [boxStartX, boxStartY] = box.startPoint;\n        const [boxEndX, boxEndY] = box.endPoint;\n        const [previousBoxStartX, previousBoxStartY] = previousBox.startPoint;\n        const [previousBoxEndX, previousBoxEndY] = previousBox.endPoint;\n        const xStartMax = Math.max(boxStartX, previousBoxStartX);\n        const yStartMax = Math.max(boxStartY, previousBoxStartY);\n        const xEndMin = Math.min(boxEndX, previousBoxEndX);\n        const yEndMin = Math.min(boxEndY, previousBoxEndY);\n        const intersection = (xEndMin - xStartMax) * (yEndMin - yStartMax);\n        const boxArea = (boxEndX - boxStartX) * (boxEndY - boxStartY);\n        const previousBoxArea = (previousBoxEndX - previousBoxStartX) * (previousBoxEndY - boxStartY);\n        iou = intersection / (boxArea + previousBoxArea - intersection);\n      }\n      this.regionsOfInterest[index][0] = iou > UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD ? previousBox : box;\n    }\n  }\n\n  shouldUpdateRegionsOfInterest() {\n    return !this.regionsOfInterest || (this.regionsOfInterest.length === 0) || (this.runsWithoutHandDetector >= this.skipFrames);\n  }\n}\nexports.HandPipeline = HandPipeline;\n", "const tf = require('@tensorflow/tfjs');\nconst hand = require('./handdetector');\nconst keypoints = require('./keypoints');\nconst pipe = require('./pipeline');\n\nclass HandPose {\n  constructor(pipeline) {\n    this.pipeline = pipeline;\n  }\n\n  async estimateHands(input, config) {\n    this.skipFrames = config.skipFrames;\n    this.detectionConfidence = config.minConfidence;\n    this.maxHands = config.maxHands;\n    const predictions = await this.pipeline.estimateHands(input, config);\n    const hands = [];\n    if (!predictions) return hands;\n    for (const prediction of predictions) {\n      if (!prediction) return [];\n      const annotations = {};\n      for (const key of Object.keys(keypoints.MESH_ANNOTATIONS)) {\n        annotations[key] = keypoints.MESH_ANNOTATIONS[key].map((index) => prediction.landmarks[index]);\n      }\n      hands.push({\n        confidence: prediction.confidence || 0,\n        box: prediction.box ? [prediction.box.topLeft[0], prediction.box.topLeft[1], prediction.box.bottomRight[0] - prediction.box.topLeft[0], prediction.box.bottomRight[1] - prediction.box.topLeft[1]] : 0,\n        landmarks: prediction.landmarks,\n        annotations,\n      });\n    }\n    return hands;\n  }\n}\nexports.HandPose = HandPose;\n\nasync function loadAnchors(url) {\n  if (tf.env().features.IS_NODE) {\n    // eslint-disable-next-line global-require\n    const fs = require('fs');\n    const data = await fs.readFileSync(url.replace('file://', ''));\n    return JSON.parse(data);\n  }\n  return tf.util.fetch(url).then((d) => d.json());\n}\n\nasync function load(config) {\n  const [anchors, handDetectorModel, handPoseModel] = await Promise.all([\n    loadAnchors(config.detector.anchors),\n    tf.loadGraphModel(config.detector.modelPath, { fromTFHub: config.detector.modelPath.includes('tfhub.dev') }),\n    tf.loadGraphModel(config.skeleton.modelPath, { fromTFHub: config.skeleton.modelPath.includes('tfhub.dev') }),\n  ]);\n  const detector = new hand.HandDetector(handDetectorModel, anchors, config);\n  const pipeline = new pipe.HandPipeline(detector, handPoseModel, config);\n  const handpose = new HandPose(pipeline);\n  return handpose;\n}\nexports.load = load;\n", "/* eslint-disable no-shadow */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable no-sequences */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable no-multi-assign */\n/* eslint-disable no-use-before-define */\n/*\nWebGLImageFilter - MIT Licensed\n2013, Dominic Szablewski - phoboslab.org\n*/\n\nconst WebGLProgram = function (gl, vertexSource, fragmentSource) {\n  const _collect = function (source, prefix, collection) {\n    const r = new RegExp('\\\\b' + prefix + ' \\\\w+ (\\\\w+)', 'ig');\n    source.replace(r, (match, name) => {\n      collection[name] = 0;\n      return match;\n    });\n  };\n\n  const _compile = function (gl, source, type) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      throw new Error('Filter: GL compile failed', gl.getShaderInfoLog(shader));\n    }\n    return shader;\n  };\n\n  this.uniform = {};\n  this.attribute = {};\n\n  const _vsh = _compile(gl, vertexSource, gl.VERTEX_SHADER);\n  const _fsh = _compile(gl, fragmentSource, gl.FRAGMENT_SHADER);\n\n  this.id = gl.createProgram();\n  gl.attachShader(this.id, _vsh);\n  gl.attachShader(this.id, _fsh);\n  gl.linkProgram(this.id);\n\n  if (!gl.getProgramParameter(this.id, gl.LINK_STATUS)) {\n    throw new Error('Filter: GL link failed', gl.getProgramInfoLog(this.id));\n  }\n\n  gl.useProgram(this.id);\n\n  // Collect attributes\n  _collect(vertexSource, 'attribute', this.attribute);\n  for (const a in this.attribute) {\n    this.attribute[a] = gl.getAttribLocation(this.id, a);\n  }\n\n  // Collect uniforms\n  _collect(vertexSource, 'uniform', this.uniform);\n  _collect(fragmentSource, 'uniform', this.uniform);\n  for (const u in this.uniform) {\n    this.uniform[u] = gl.getUniformLocation(this.id, u);\n  }\n};\n\nconst WebGLImageFilter = function (params) {\n  if (!params) params = { };\n  let _drawCount = 0;\n  let _sourceTexture = null;\n  let _lastInChain = false;\n  let _currentFramebufferIndex = -1;\n  let _tempFramebuffers = [null, null];\n  let _filterChain = [];\n  let _width = -1;\n  let _height = -1;\n  let _vertexBuffer = null;\n  let _currentProgram = null;\n  const _canvas = params.canvas || document.createElement('canvas');\n\n  // key is the shader program source, value is the compiled program\n  const _shaderProgramCache = { };\n\n  const gl = _canvas.getContext('webgl') || _canvas.getContext('experimental-webgl');\n  if (!gl) throw new Error('Filter: getContext() failed');\n\n  this.addFilter = function (name) {\n    const args = Array.prototype.slice.call(arguments, 1);\n    const filter = _filter[name];\n\n    _filterChain.push({ func: filter, args });\n  };\n\n  this.reset = function () {\n    _filterChain = [];\n  };\n\n  this.apply = function (image) {\n    _resize(image.width, image.height);\n    _drawCount = 0;\n\n    // Create the texture for the input image if we haven't yet\n    if (!_sourceTexture) _sourceTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, _sourceTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\n    // No filters? Just draw\n    if (_filterChain.length === 0) {\n      const program = _compileShader(SHADER.FRAGMENT_IDENTITY);\n      _draw();\n      return _canvas;\n    }\n\n    for (let i = 0; i < _filterChain.length; i++) {\n      _lastInChain = (i === _filterChain.length - 1);\n      const f = _filterChain[i];\n      f.func.apply(this, f.args || []);\n    }\n\n    return _canvas;\n  };\n\n  const _resize = function (width, height) {\n    // Same width/height? Nothing to do here\n    if (width === _width && height === _height) { return; }\n\n    _canvas.width = _width = width;\n    _canvas.height = _height = height;\n\n    // Create the context if we don't have it yet\n    if (!_vertexBuffer) {\n      // Create the vertex buffer for the two triangles [x, y, u, v] * 6\n      const vertices = new Float32Array([\n        -1, -1, 0, 1, 1, -1, 1, 1, -1, 1, 0, 0,\n        -1, 1, 0, 0, 1, -1, 1, 1, 1, 1, 1, 0,\n      ]);\n      _vertexBuffer = gl.createBuffer(),\n      gl.bindBuffer(gl.ARRAY_BUFFER, _vertexBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n      // Note sure if this is a good idea; at least it makes texture loading\n      // in Ejecta instant.\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n    }\n\n    gl.viewport(0, 0, _width, _height);\n\n    // Delete old temp framebuffers\n    _tempFramebuffers = [null, null];\n  };\n\n  const _getTempFramebuffer = function (index) {\n    _tempFramebuffers[index] = _tempFramebuffers[index]\n    || _createFramebufferTexture(_width, _height);\n\n    return _tempFramebuffers[index];\n  };\n\n  const _createFramebufferTexture = function (width, height) {\n    const fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n\n    const renderbuffer = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return { fbo, texture };\n  };\n\n  const _draw = function (flags) {\n    let source = null;\n    let target = null;\n    let flipY = false;\n\n    // Set up the source\n    if (_drawCount === 0) {\n      // First draw call - use the source texture\n      source = _sourceTexture;\n    } else {\n      // All following draw calls use the temp buffer last drawn to\n      source = _getTempFramebuffer(_currentFramebufferIndex).texture;\n    }\n    _drawCount++;\n\n    // Set up the target\n    if (_lastInChain && !(flags & DRAW.INTERMEDIATE)) {\n      // Last filter in our chain - draw directly to the WebGL Canvas. We may\n      // also have to flip the image vertically now\n      target = null;\n      flipY = _drawCount % 2 === 0;\n    } else {\n      // Intermediate draw call - get a temp buffer to draw to\n      _currentFramebufferIndex = (_currentFramebufferIndex + 1) % 2;\n      target = _getTempFramebuffer(_currentFramebufferIndex).fbo;\n    }\n\n    // Bind the source and target and draw the two triangles\n    gl.bindTexture(gl.TEXTURE_2D, source);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target);\n\n    gl.uniform1f(_currentProgram.uniform.flipY, (flipY ? -1 : 1));\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n  };\n\n  const _compileShader = function (fragmentSource) {\n    if (_shaderProgramCache[fragmentSource]) {\n      _currentProgram = _shaderProgramCache[fragmentSource];\n      gl.useProgram(_currentProgram.id);\n      return _currentProgram;\n    }\n\n    // Compile shaders\n    _currentProgram = new WebGLProgram(gl, SHADER.VERTEX_IDENTITY, fragmentSource);\n\n    const floatSize = Float32Array.BYTES_PER_ELEMENT;\n    const vertSize = 4 * floatSize;\n    gl.enableVertexAttribArray(_currentProgram.attribute.pos);\n    gl.vertexAttribPointer(_currentProgram.attribute.pos, 2, gl.FLOAT, false, vertSize, 0 * floatSize);\n    gl.enableVertexAttribArray(_currentProgram.attribute.uv);\n    gl.vertexAttribPointer(_currentProgram.attribute.uv, 2, gl.FLOAT, false, vertSize, 2 * floatSize);\n\n    _shaderProgramCache[fragmentSource] = _currentProgram;\n    return _currentProgram;\n  };\n\n  let DRAW = { INTERMEDIATE: 1 };\n\n  let SHADER = {};\n  SHADER.VERTEX_IDENTITY = [\n    'precision highp float;',\n    'attribute vec2 pos;',\n    'attribute vec2 uv;',\n    'varying vec2 vUv;',\n    'uniform float flipY;',\n\n    'void main(void) {',\n    'vUv = uv;',\n    'gl_Position = vec4(pos.x, pos.y*flipY, 0.0, 1.);',\n    '}',\n  ].join('\\n');\n\n  SHADER.FRAGMENT_IDENTITY = [\n    'precision highp float;',\n    'varying vec2 vUv;',\n    'uniform sampler2D texture;',\n\n    'void main(void) {',\n    'gl_FragColor = texture2D(texture, vUv);',\n    '}',\n  ].join('\\n');\n\n  let _filter = {};\n\n  // -------------------------------------------------------------------------\n  // Color Matrix Filter\n\n  _filter.colorMatrix = function (matrix) {\n    // Create a Float32 Array and normalize the offset component to 0-1\n    const m = new Float32Array(matrix);\n    m[4] /= 255;\n    m[9] /= 255;\n    m[14] /= 255;\n    m[19] /= 255;\n\n    // Can we ignore the alpha value? Makes things a bit faster.\n    const shader = (m[18] === 1 && m[3] === 0 && m[8] === 0 && m[13] === 0 && m[15] === 0 && m[16] === 0 && m[17] === 0 && m[19] === 0)\n      ? _filter.colorMatrix.SHADER.WITHOUT_ALPHA\n      : _filter.colorMatrix.SHADER.WITH_ALPHA;\n\n    const program = _compileShader(shader);\n    gl.uniform1fv(program.uniform.m, m);\n    _draw();\n  };\n\n  _filter.colorMatrix.SHADER = {};\n  _filter.colorMatrix.SHADER.WITH_ALPHA = [\n    'precision highp float;',\n    'varying vec2 vUv;',\n    'uniform sampler2D texture;',\n    'uniform float m[20];',\n\n    'void main(void) {',\n    'vec4 c = texture2D(texture, vUv);',\n    'gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[3] * c.a + m[4];',\n    'gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[8] * c.a + m[9];',\n    'gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[13] * c.a + m[14];',\n    'gl_FragColor.a = m[15] * c.r + m[16] * c.g + m[17] * c.b + m[18] * c.a + m[19];',\n    '}',\n  ].join('\\n');\n  _filter.colorMatrix.SHADER.WITHOUT_ALPHA = [\n    'precision highp float;',\n    'varying vec2 vUv;',\n    'uniform sampler2D texture;',\n    'uniform float m[20];',\n\n    'void main(void) {',\n    'vec4 c = texture2D(texture, vUv);',\n    'gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[4];',\n    'gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[9];',\n    'gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[14];',\n    'gl_FragColor.a = c.a;',\n    '}',\n  ].join('\\n');\n\n  _filter.brightness = function (brightness) {\n    const b = (brightness || 0) + 1;\n    _filter.colorMatrix([\n      b, 0, 0, 0, 0,\n      0, b, 0, 0, 0,\n      0, 0, b, 0, 0,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.saturation = function (amount) {\n    const x = (amount || 0) * 2 / 3 + 1;\n    const y = ((x - 1) * -0.5);\n    _filter.colorMatrix([\n      x, y, y, 0, 0,\n      y, x, y, 0, 0,\n      y, y, x, 0, 0,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.desaturate = function () {\n    _filter.saturation(-1);\n  };\n\n  _filter.contrast = function (amount) {\n    const v = (amount || 0) + 1;\n    const o = -128 * (v - 1);\n\n    _filter.colorMatrix([\n      v, 0, 0, 0, o,\n      0, v, 0, 0, o,\n      0, 0, v, 0, o,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.negative = function () {\n    _filter.contrast(-2);\n  };\n\n  _filter.hue = function (rotation) {\n    rotation = (rotation || 0) / 180 * Math.PI;\n    const cos = Math.cos(rotation);\n    const sin = Math.sin(rotation);\n    const lumR = 0.213;\n    const lumG = 0.715;\n    const lumB = 0.072;\n\n    _filter.colorMatrix([\n      lumR + cos * (1 - lumR) + sin * (-lumR), lumG + cos * (-lumG) + sin * (-lumG), lumB + cos * (-lumB) + sin * (1 - lumB), 0, 0,\n      lumR + cos * (-lumR) + sin * (0.143), lumG + cos * (1 - lumG) + sin * (0.140), lumB + cos * (-lumB) + sin * (-0.283), 0, 0,\n      lumR + cos * (-lumR) + sin * (-(1 - lumR)), lumG + cos * (-lumG) + sin * (lumG), lumB + cos * (1 - lumB) + sin * (lumB), 0, 0,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.desaturateLuminance = function () {\n    _filter.colorMatrix([\n      0.2764723, 0.9297080, 0.0938197, 0, -37.1,\n      0.2764723, 0.9297080, 0.0938197, 0, -37.1,\n      0.2764723, 0.9297080, 0.0938197, 0, -37.1,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.sepia = function () {\n    _filter.colorMatrix([\n      0.393, 0.7689999, 0.18899999, 0, 0,\n      0.349, 0.6859999, 0.16799999, 0, 0,\n      0.272, 0.5339999, 0.13099999, 0, 0,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.brownie = function () {\n    _filter.colorMatrix([\n      0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873,\n      -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127,\n      0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.vintagePinhole = function () {\n    _filter.colorMatrix([\n      0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123,\n      0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591,\n      0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.kodachrome = function () {\n    _filter.colorMatrix([\n      1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n      -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n      -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.technicolor = function () {\n    _filter.colorMatrix([\n      1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337,\n      -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398,\n      -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.polaroid = function () {\n    _filter.colorMatrix([\n      1.438, -0.062, -0.062, 0, 0,\n      -0.122, 1.378, -0.122, 0, 0,\n      -0.016, -0.016, 1.483, 0, 0,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  _filter.shiftToBGR = function () {\n    _filter.colorMatrix([\n      0, 0, 1, 0, 0,\n      0, 1, 0, 0, 0,\n      1, 0, 0, 0, 0,\n      0, 0, 0, 1, 0,\n    ]);\n  };\n\n  // -------------------------------------------------------------------------\n  // Convolution Filter\n\n  _filter.convolution = function (matrix) {\n    const m = new Float32Array(matrix);\n    const pixelSizeX = 1 / _width;\n    const pixelSizeY = 1 / _height;\n\n    const program = _compileShader(_filter.convolution.SHADER);\n    gl.uniform1fv(program.uniform.m, m);\n    gl.uniform2f(program.uniform.px, pixelSizeX, pixelSizeY);\n    _draw();\n  };\n\n  _filter.convolution.SHADER = [\n    'precision highp float;',\n    'varying vec2 vUv;',\n    'uniform sampler2D texture;',\n    'uniform vec2 px;',\n    'uniform float m[9];',\n\n    'void main(void) {',\n    'vec4 c11 = texture2D(texture, vUv - px);', // top left\n    'vec4 c12 = texture2D(texture, vec2(vUv.x, vUv.y - px.y));', // top center\n    'vec4 c13 = texture2D(texture, vec2(vUv.x + px.x, vUv.y - px.y));', // top right\n\n    'vec4 c21 = texture2D(texture, vec2(vUv.x - px.x, vUv.y) );', // mid left\n    'vec4 c22 = texture2D(texture, vUv);', // mid center\n    'vec4 c23 = texture2D(texture, vec2(vUv.x + px.x, vUv.y) );', // mid right\n\n    'vec4 c31 = texture2D(texture, vec2(vUv.x - px.x, vUv.y + px.y) );', // bottom left\n    'vec4 c32 = texture2D(texture, vec2(vUv.x, vUv.y + px.y) );', // bottom center\n    'vec4 c33 = texture2D(texture, vUv + px );', // bottom right\n\n    'gl_FragColor = ',\n    'c11 * m[0] + c12 * m[1] + c22 * m[2] +',\n    'c21 * m[3] + c22 * m[4] + c23 * m[5] +',\n    'c31 * m[6] + c32 * m[7] + c33 * m[8];',\n    'gl_FragColor.a = c22.a;',\n    '}',\n  ].join('\\n');\n\n  _filter.detectEdges = function () {\n    _filter.convolution.call(this, [\n      0, 1, 0,\n      1, -4, 1,\n      0, 1, 0,\n    ]);\n  };\n\n  _filter.sobelX = function () {\n    _filter.convolution.call(this, [\n      -1, 0, 1,\n      -2, 0, 2,\n      -1, 0, 1,\n    ]);\n  };\n\n  _filter.sobelY = function () {\n    _filter.convolution.call(this, [\n      -1, -2, -1,\n      0, 0, 0,\n      1, 2, 1,\n    ]);\n  };\n\n  _filter.sharpen = function (amount) {\n    const a = amount || 1;\n    _filter.convolution.call(this, [\n      0, -1 * a, 0,\n      -1 * a, 1 + 4 * a, -1 * a,\n      0, -1 * a, 0,\n    ]);\n  };\n\n  _filter.emboss = function (size) {\n    const s = size || 1;\n    _filter.convolution.call(this, [\n      -2 * s, -1 * s, 0,\n      -1 * s, 1, 1 * s,\n      0, 1 * s, 2 * s,\n    ]);\n  };\n\n  // -------------------------------------------------------------------------\n  // Blur Filter\n\n  _filter.blur = function (size) {\n    const blurSizeX = (size / 7) / _width;\n    const blurSizeY = (size / 7) / _height;\n\n    const program = _compileShader(_filter.blur.SHADER);\n\n    // Vertical\n    gl.uniform2f(program.uniform.px, 0, blurSizeY);\n    _draw(DRAW.INTERMEDIATE);\n\n    // Horizontal\n    gl.uniform2f(program.uniform.px, blurSizeX, 0);\n    _draw();\n  };\n\n  _filter.blur.SHADER = [\n    'precision highp float;',\n    'varying vec2 vUv;',\n    'uniform sampler2D texture;',\n    'uniform vec2 px;',\n\n    'void main(void) {',\n    'gl_FragColor = vec4(0.0);',\n    'gl_FragColor += texture2D(texture, vUv + vec2(-7.0*px.x, -7.0*px.y))*0.0044299121055113265;',\n    'gl_FragColor += texture2D(texture, vUv + vec2(-6.0*px.x, -6.0*px.y))*0.00895781211794;',\n    'gl_FragColor += texture2D(texture, vUv + vec2(-5.0*px.x, -5.0*px.y))*0.0215963866053;',\n    'gl_FragColor += texture2D(texture, vUv + vec2(-4.0*px.x, -4.0*px.y))*0.0443683338718;',\n    'gl_FragColor += texture2D(texture, vUv + vec2(-3.0*px.x, -3.0*px.y))*0.0776744219933;',\n    'gl_FragColor += texture2D(texture, vUv + vec2(-2.0*px.x, -2.0*px.y))*0.115876621105;',\n    'gl_FragColor += texture2D(texture, vUv + vec2(-1.0*px.x, -1.0*px.y))*0.147308056121;',\n    'gl_FragColor += texture2D(texture, vUv                             )*0.159576912161;',\n    'gl_FragColor += texture2D(texture, vUv + vec2( 1.0*px.x,  1.0*px.y))*0.147308056121;',\n    'gl_FragColor += texture2D(texture, vUv + vec2( 2.0*px.x,  2.0*px.y))*0.115876621105;',\n    'gl_FragColor += texture2D(texture, vUv + vec2( 3.0*px.x,  3.0*px.y))*0.0776744219933;',\n    'gl_FragColor += texture2D(texture, vUv + vec2( 4.0*px.x,  4.0*px.y))*0.0443683338718;',\n    'gl_FragColor += texture2D(texture, vUv + vec2( 5.0*px.x,  5.0*px.y))*0.0215963866053;',\n    'gl_FragColor += texture2D(texture, vUv + vec2( 6.0*px.x,  6.0*px.y))*0.00895781211794;',\n    'gl_FragColor += texture2D(texture, vUv + vec2( 7.0*px.x,  7.0*px.y))*0.0044299121055113265;',\n    '}',\n  ].join('\\n');\n\n  // -------------------------------------------------------------------------\n  // Pixelate Filter\n\n  _filter.pixelate = function (size) {\n    const blurSizeX = (size) / _width;\n    const blurSizeY = (size) / _height;\n\n    const program = _compileShader(_filter.pixelate.SHADER);\n\n    // Horizontal\n    gl.uniform2f(program.uniform.size, blurSizeX, blurSizeY);\n    _draw();\n  };\n\n  _filter.pixelate.SHADER = [\n    'precision highp float;',\n    'varying vec2 vUv;',\n    'uniform vec2 size;',\n    'uniform sampler2D texture;',\n\n    'vec2 pixelate(vec2 coord, vec2 size) {',\n    'return floor( coord / size ) * size;',\n    '}',\n\n    'void main(void) {',\n    'gl_FragColor = vec4(0.0);',\n    'vec2 coord = pixelate(vUv, size);',\n    'gl_FragColor += texture2D(texture, coord);',\n    '}',\n  ].join('\\n');\n};\n\nexports.Canvas = WebGLImageFilter;\n", "/* eslint-disable indent */\n/* eslint-disable no-multi-spaces */\n\nexport default {\n  backend: 'webgl',          // select tfjs backend to use\n  console: true,             // enable debugging output to console\n  scoped: false,             // enable scoped runs\n                             // some models *may* have memory leaks, this wrapps everything in a local scope at a cost of performance\n                             // typically not needed\n  videoOptimized: true,      // perform additional optimizations when input is video, must be disabled for images\n  filter: {\n    enabled: true,           // enable image pre-processing filters\n    width: 0,                // resize input width\n    height: 0,               // resize input height\n                             // if both width and height are set to 0, there is no resizing\n                             // if just one is set, second one is scaled automatically\n                             // if both are set, values are used as-is\n    return: true,            // return processed canvas imagedata in result\n    brightness: 0,           // range: -1 (darken) to 1 (lighten)\n    contrast: 0,             // range: -1 (reduce contrast) to 1 (increase contrast)\n    sharpness: 0,            // range: 0 (no sharpening) to 1 (maximum sharpening)\n    blur: 0,                 // range: 0 (no blur) to N (blur radius in pixels)\n    saturation: 0,           // range: -1 (reduce saturation) to 1 (increase saturation)\n    hue: 0,                  // range: 0 (no change) to 360 (hue rotation in degrees)\n    negative: false,         // image negative\n    sepia: false,            // image sepia colors\n    vintage: false,          // image vintage colors\n    kodachrome: false,       // image kodachrome colors\n    technicolor: false,      // image technicolor colors\n    polaroid: false,         // image polaroid camera effect\n    pixelate: 0,             // range: 0 (no pixelate) to N (number of pixels to pixelate)\n  },\n  face: {\n    enabled: true,           // controls if specified modul is enabled\n                             // face.enabled is required for all face models: detector, mesh, iris, age, gender, emotion\n                             // (note: module is not loaded until it is required)\n    detector: {\n      modelPath: '../models/blazeface/back/model.json', // can be 'front' or 'back'.\n                                                        // 'front' is optimized for large faces such as front-facing camera and 'back' is optimized for distanct faces.\n      inputSize: 256,        // fixed value: 128 for front and 256 for 'back'\n      maxFaces: 10,          // maximum number of faces detected in the input, should be set to the minimum number for performance\n      skipFrames: 10,        // how many frames to go without re-running the face bounding box detector, only used for video inputs\n                             // if model is running st 25 FPS, we can re-use existing bounding box for updated face mesh analysis\n                             // as face probably hasn't moved much in short time (10 * 1/25 = 0.25 sec)\n      minConfidence: 0.5,    // threshold for discarding a prediction\n      iouThreshold: 0.3,     // threshold for deciding whether boxes overlap too much in non-maximum suppression\n      scoreThreshold: 0.7,   // threshold for deciding when to remove boxes based on score in non-maximum suppression\n    },\n    mesh: {\n      enabled: true,\n      modelPath: '../models/facemesh/model.json',\n      inputSize: 192,        // fixed value\n    },\n    iris: {\n      enabled: true,\n      modelPath: '../models/iris/model.json',\n      enlargeFactor: 2.3,    // empiric tuning\n      inputSize: 64,         // fixed value\n    },\n    age: {\n      enabled: true,\n      modelPath: '../models/ssrnet-age/imdb/model.json', // can be 'imdb' or 'wiki'\n                                                         // which determines training set for model\n      inputSize: 64,         // fixed value\n      skipFrames: 10,        // how many frames to go without re-running the detector, only used for video inputs\n    },\n    gender: {\n      enabled: true,\n      minConfidence: 0.8,    // threshold for discarding a prediction\n      modelPath: '../models/ssrnet-gender/imdb/model.json',\n    },\n    emotion: {\n      enabled: true,\n      inputSize: 64,         // fixed value\n      minConfidence: 0.5,    // threshold for discarding a prediction\n      skipFrames: 10,        // how many frames to go without re-running the detector\n      modelPath: '../models/emotion/model.json',\n    },\n  },\n  body: {\n    enabled: true,\n    modelPath: '../models/posenet/model.json',\n    inputResolution: 257,    // fixed value\n    outputStride: 16,        // fixed value\n    maxDetections: 10,       // maximum number of people detected in the input, should be set to the minimum number for performance\n    scoreThreshold: 0.7,     // threshold for deciding when to remove boxes based on score in non-maximum suppression\n    nmsRadius: 20,           // radius for deciding points are too close in non-maximum suppression\n  },\n  hand: {\n    enabled: true,\n    inputSize: 256,          // fixed value\n    skipFrames: 10,          // how many frames to go without re-running the hand bounding box detector, only used for video inputs\n                             // if model is running st 25 FPS, we can re-use existing bounding box for updated hand skeleton analysis\n                             // as the hand probably hasn't moved much in short time (10 * 1/25 = 0.25 sec)\n    minConfidence: 0.5,      // threshold for discarding a prediction\n    iouThreshold: 0.3,       // threshold for deciding whether boxes overlap too much in non-maximum suppression\n    scoreThreshold: 0.7,     // threshold for deciding when to remove boxes based on score in non-maximum suppression\n    enlargeFactor: 1.65,     // empiric tuning as skeleton prediction prefers hand box with some whitespace\n    maxHands: 10,            // maximum number of hands detected in the input, should be set to the minimum number for performance\n    detector: {\n      anchors: '../models/handdetect/anchors.json',\n      modelPath: '../models/handdetect/model.json',\n    },\n    skeleton: {\n      modelPath: '../models/handskeleton/model.json',\n    },\n  },\n};\n", "const tf = require('@tensorflow/tfjs');\nconst facemesh = require('./facemesh/facemesh.js');\nconst ssrnet = require('./ssrnet/ssrnet.js');\nconst emotion = require('./emotion/emotion.js');\nconst posenet = require('./posenet/posenet.js');\nconst handpose = require('./handpose/handpose.js');\nconst fxImage = require('./imagefx.js');\nconst defaults = require('../config.js').default;\nconst app = require('../package.json');\n\nlet first = true;\n\n// static config override for non-video detection\nconst override = {\n  face: { detector: { skipFrames: 0 }, age: { skipFrames: 0 }, emotion: { skipFrames: 0 } },\n  hand: { skipFrames: 0 },\n};\n\n// helper function: gets elapsed time on both browser and nodejs\nconst now = () => {\n  if (typeof performance !== 'undefined') return performance.now();\n  return parseInt(Number(process.hrtime.bigint()) / 1000 / 1000);\n};\n\n// helper function: perform deep merge of multiple objects so it allows full inheriance with overrides\nfunction mergeDeep(...objects) {\n  const isObject = (obj) => obj && typeof obj === 'object';\n  return objects.reduce((prev, obj) => {\n    Object.keys(obj || {}).forEach((key) => {\n      const pVal = prev[key];\n      const oVal = obj[key];\n      if (Array.isArray(pVal) && Array.isArray(oVal)) {\n        prev[key] = pVal.concat(...oVal);\n      } else if (isObject(pVal) && isObject(oVal)) {\n        prev[key] = mergeDeep(pVal, oVal);\n      } else {\n        prev[key] = oVal;\n      }\n    });\n    return prev;\n  }, {});\n}\n\nfunction sanity(input) {\n  if (!input) return 'input is not defined';\n  if (tf.ENV.flags.IS_NODE && !(input instanceof tf.Tensor)) {\n    return 'input must be a tensor';\n  }\n  try {\n    tf.getBackend();\n  } catch {\n    return 'backend not loaded';\n  }\n  return null;\n}\n\nclass Human {\n  constructor() {\n    this.tf = tf;\n    this.version = app.version;\n    this.defaults = defaults;\n    this.config = defaults;\n    this.fx = (tf.ENV.flags.IS_BROWSER && (typeof document !== 'undefined')) ? new fxImage.Canvas() : null;\n    this.state = 'idle';\n    this.numTensors = 0;\n    this.analyzeMemoryLeaks = false;\n    // object that contains all initialized models\n    this.models = {\n      facemesh: null,\n      posenet: null,\n      handpose: null,\n      iris: null,\n      age: null,\n      gender: null,\n      emotion: null,\n    };\n    // export raw access to underlying models\n    this.facemesh = facemesh;\n    this.ssrnet = ssrnet;\n    this.emotion = emotion;\n    this.posenet = posenet;\n    this.handpose = handpose;\n  }\n\n  // helper function: wrapper around console output\n  log(...msg) {\n    // eslint-disable-next-line no-console\n    if (msg && this.config.console) console.log(...msg);\n  }\n\n  // helper function: measure tensor leak\n  analyze(...msg) {\n    if (!this.analyzeMemoryLeaks) return;\n    const current = tf.engine().state.numTensors;\n    const previous = this.numTensors;\n    this.numTensors = current;\n    const leaked = current - previous;\n    if (leaked !== 0) this.log(...msg, leaked);\n  }\n\n  async load(userConfig) {\n    if (userConfig) this.config = mergeDeep(defaults, userConfig);\n    if (this.config.face.enabled && !this.models.facemesh) {\n      this.log('Load model: Face');\n      this.models.facemesh = await facemesh.load(this.config.face);\n    }\n    if (this.config.body.enabled && !this.models.posenet) {\n      this.log('Load model: Body');\n      this.models.posenet = await posenet.load(this.config.body);\n    }\n    if (this.config.hand.enabled && !this.models.handpose) {\n      this.log('Load model: Hand');\n      this.models.handpose = await handpose.load(this.config.hand);\n    }\n    if (this.config.face.enabled && this.config.face.age.enabled && !this.models.age) {\n      this.log('Load model: Age');\n      this.models.age = await ssrnet.loadAge(this.config);\n    }\n    if (this.config.face.enabled && this.config.face.gender.enabled && !this.models.gender) {\n      this.log('Load model: Gender');\n      this.models.gender = await ssrnet.loadGender(this.config);\n    }\n    if (this.config.face.enabled && this.config.face.emotion.enabled && !this.models.emotion) {\n      this.log('Load model: Emotion');\n      this.models.emotion = await emotion.load(this.config);\n    }\n  }\n\n  tfImage(input) {\n    // let imageData;\n    let filtered;\n    if (this.fx && this.config.filter.enabled && !(input instanceof tf.Tensor)) {\n      const originalWidth = input.naturalWidth || input.videoWidth || input.width || (input.shape && (input.shape[1] > 0));\n      const originalHeight = input.naturalHeight || input.videoHeight || input.height || (input.shape && (input.shape[2] > 0));\n\n      let targetWidth = originalWidth;\n      if (this.config.filter.width > 0) targetWidth = this.config.filter.width;\n      else if (this.config.filter.height > 0) targetWidth = originalWidth * (this.config.filter.height / originalHeight);\n      let targetHeight = originalHeight;\n      if (this.config.filter.height > 0) targetHeight = this.config.filter.height;\n      else if (this.config.filter.width > 0) targetHeight = originalHeight * (this.config.filter.width / originalWidth);\n      const offscreenCanvas = (typeof OffscreenCanvas !== 'undefined') ? new OffscreenCanvas(targetWidth, targetHeight) : document.createElement('canvas');\n      offscreenCanvas.width = targetWidth;\n      offscreenCanvas.height = targetHeight;\n      const ctx = offscreenCanvas.getContext('2d');\n      if (input instanceof ImageData) ctx.putImageData(input, 0, 0);\n      else ctx.drawImage(input, 0, 0, originalWidth, originalHeight, 0, 0, offscreenCanvas.width, offscreenCanvas.height);\n      this.fx.reset();\n      this.fx.addFilter('brightness', this.config.filter.brightness); // must have at least one filter enabled\n      if (this.config.filter.contrast !== 0) this.fx.addFilter('contrast', this.config.filter.contrast);\n      if (this.config.filter.sharpness !== 0) this.fx.addFilter('sharpen', this.config.filter.sharpness);\n      if (this.config.filter.blur !== 0) this.fx.addFilter('blur', this.config.filter.blur);\n      if (this.config.filter.saturation !== 0) this.fx.addFilter('saturation', this.config.filter.saturation);\n      if (this.config.filter.hue !== 0) this.fx.addFilter('hue', this.config.filter.hue);\n      if (this.config.filter.negative) this.fx.addFilter('negative');\n      if (this.config.filter.sepia) this.fx.addFilter('sepia');\n      if (this.config.filter.vintage) this.fx.addFilter('brownie');\n      if (this.config.filter.sepia) this.fx.addFilter('sepia');\n      if (this.config.filter.kodachrome) this.fx.addFilter('kodachrome');\n      if (this.config.filter.technicolor) this.fx.addFilter('technicolor');\n      if (this.config.filter.polaroid) this.fx.addFilter('polaroid');\n      if (this.config.filter.pixelate !== 0) this.fx.addFilter('pixelate', this.config.filter.pixelate);\n      filtered = this.fx.apply(offscreenCanvas);\n    }\n    let tensor;\n    if (input instanceof tf.Tensor) {\n      tensor = tf.clone(input);\n    } else {\n      const pixels = tf.browser.fromPixels(filtered || input);\n      const casted = pixels.toFloat();\n      tensor = casted.expandDims(0);\n      pixels.dispose();\n      casted.dispose();\n    }\n    return { tensor, canvas: this.config.filter.return ? filtered : null };\n  }\n\n  async detect(input, userConfig = {}) {\n    this.state = 'config';\n    const perf = {};\n    let timeStamp;\n\n    this.config = mergeDeep(defaults, userConfig);\n    if (!this.config.videoOptimized) this.config = mergeDeep(this.config, override);\n\n    // sanity checks\n    this.state = 'check';\n    const error = sanity(input);\n    if (error) {\n      this.log(error, input);\n      return { error };\n    }\n\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise(async (resolve) => {\n      const timeStart = now();\n\n      // configure backend\n      timeStamp = now();\n      if (tf.getBackend() !== this.config.backend) {\n        this.state = 'backend';\n        this.log('Human library setting backend:', this.config.backend);\n        await tf.setBackend(this.config.backend);\n        await tf.ready();\n      }\n      perf.backend = Math.trunc(now() - timeStamp);\n\n      // check number of loaded models\n      if (first) {\n        this.log('Human library starting');\n        this.log('Configuration:', this.config);\n        this.log('Flags:', tf.ENV.flags);\n        first = false;\n      }\n\n      // load models if enabled\n      timeStamp = now();\n      this.state = 'load';\n      await this.load();\n      perf.load = Math.trunc(now() - timeStamp);\n\n      if (this.config.scoped) tf.engine().startScope();\n\n      this.analyze('Start Detect:');\n\n      timeStamp = now();\n      const image = this.tfImage(input);\n      perf.image = Math.trunc(now() - timeStamp);\n      const imageTensor = image.tensor;\n\n      // run posenet\n      this.state = 'run:body';\n      timeStamp = now();\n      this.analyze('Start PoseNet');\n      const poseRes = this.config.body.enabled ? await this.models.posenet.estimatePoses(imageTensor, this.config.body) : [];\n      this.analyze('End PoseNet:');\n      perf.body = Math.trunc(now() - timeStamp);\n\n      // run handpose\n      this.state = 'run:hand';\n      timeStamp = now();\n      this.analyze('Start HandPose:');\n      const handRes = this.config.hand.enabled ? await this.models.handpose.estimateHands(imageTensor, this.config.hand) : [];\n      this.analyze('End HandPose:');\n      perf.hand = Math.trunc(now() - timeStamp);\n\n      // run facemesh, includes blazeface and iris\n      const faceRes = [];\n      if (this.config.face.enabled) {\n        this.state = 'run:face';\n        timeStamp = now();\n        this.analyze('Start FaceMesh:');\n        const faces = await this.models.facemesh.estimateFaces(imageTensor, this.config.face);\n        perf.face = Math.trunc(now() - timeStamp);\n        for (const face of faces) {\n          // is something went wrong, skip the face\n          if (!face.image || face.image.isDisposedInternal) {\n            this.log('face object is disposed:', face.image);\n            continue;\n          }\n          // run ssr-net age & gender, inherits face from blazeface\n          this.state = 'run:agegender';\n          timeStamp = now();\n          const ssrData = (this.config.face.age.enabled || this.config.face.gender.enabled) ? await ssrnet.predict(face.image, this.config) : {};\n          perf.agegender = Math.trunc(now() - timeStamp);\n          // run emotion, inherits face from blazeface\n          this.state = 'run:emotion';\n          timeStamp = now();\n          const emotionData = this.config.face.emotion.enabled ? await emotion.predict(face.image, this.config) : {};\n          perf.emotion = Math.trunc(now() - timeStamp);\n\n          // dont need face anymore\n          face.image.dispose();\n          // calculate iris distance\n          // iris: array[ bottom, left, top, right, center ]\n          const iris = (face.annotations.leftEyeIris && face.annotations.rightEyeIris)\n            ? Math.max(face.annotations.leftEyeIris[3][0] - face.annotations.leftEyeIris[1][0], face.annotations.rightEyeIris[3][0] - face.annotations.rightEyeIris[1][0])\n            : 0;\n          faceRes.push({\n            confidence: face.confidence,\n            box: face.box,\n            mesh: face.mesh,\n            annotations: face.annotations,\n            age: ssrData.age,\n            gender: ssrData.gender,\n            agConfidence: ssrData.confidence,\n            emotion: emotionData,\n            iris: (iris !== 0) ? Math.trunc(100 * 11.7 /* human iris size in mm */ / iris) / 100 : 0,\n          });\n          this.analyze('End FaceMesh:');\n        }\n      }\n\n      imageTensor.dispose();\n      this.state = 'idle';\n\n      if (this.config.scoped) tf.engine().endScope();\n      this.analyze('End Scope:');\n\n      perf.total = Math.trunc(now() - timeStart);\n      resolve({ face: faceRes, body: poseRes, hand: handRes, performance: perf, canvas: image.canvas });\n    });\n  }\n}\n\nexport { Human as default };\n", "const tf = require('@tensorflow/tfjs');\nconst facemesh = require('./facemesh/facemesh.js');\nconst ssrnet = require('./ssrnet/ssrnet.js');\nconst emotion = require('./emotion/emotion.js');\nconst posenet = require('./posenet/posenet.js');\nconst handpose = require('./handpose/handpose.js');\nconst fxImage = require('./imagefx.js');\nconst defaults = require('../config.js').default;\nconst app = require('../package.json');\n\nlet first = true;\n\n// static config override for non-video detection\nconst override = {\n  face: { detector: { skipFrames: 0 }, age: { skipFrames: 0 }, emotion: { skipFrames: 0 } },\n  hand: { skipFrames: 0 },\n};\n\n// helper function: gets elapsed time on both browser and nodejs\nconst now = () => {\n  if (typeof performance !== 'undefined') return performance.now();\n  return parseInt(Number(process.hrtime.bigint()) / 1000 / 1000);\n};\n\n// helper function: perform deep merge of multiple objects so it allows full inheriance with overrides\nfunction mergeDeep(...objects) {\n  const isObject = (obj) => obj && typeof obj === 'object';\n  return objects.reduce((prev, obj) => {\n    Object.keys(obj || {}).forEach((key) => {\n      const pVal = prev[key];\n      const oVal = obj[key];\n      if (Array.isArray(pVal) && Array.isArray(oVal)) {\n        prev[key] = pVal.concat(...oVal);\n      } else if (isObject(pVal) && isObject(oVal)) {\n        prev[key] = mergeDeep(pVal, oVal);\n      } else {\n        prev[key] = oVal;\n      }\n    });\n    return prev;\n  }, {});\n}\n\nfunction sanity(input) {\n  if (!input) return 'input is not defined';\n  if (tf.ENV.flags.IS_NODE && !(input instanceof tf.Tensor)) {\n    return 'input must be a tensor';\n  }\n  try {\n    tf.getBackend();\n  } catch {\n    return 'backend not loaded';\n  }\n  return null;\n}\n\nclass Human {\n  constructor() {\n    this.tf = tf;\n    this.version = app.version;\n    this.defaults = defaults;\n    this.config = defaults;\n    this.fx = (tf.ENV.flags.IS_BROWSER && (typeof document !== 'undefined')) ? new fxImage.Canvas() : null;\n    this.state = 'idle';\n    this.numTensors = 0;\n    this.analyzeMemoryLeaks = false;\n    // object that contains all initialized models\n    this.models = {\n      facemesh: null,\n      posenet: null,\n      handpose: null,\n      iris: null,\n      age: null,\n      gender: null,\n      emotion: null,\n    };\n    // export raw access to underlying models\n    this.facemesh = facemesh;\n    this.ssrnet = ssrnet;\n    this.emotion = emotion;\n    this.posenet = posenet;\n    this.handpose = handpose;\n  }\n\n  // helper function: wrapper around console output\n  log(...msg) {\n    // eslint-disable-next-line no-console\n    if (msg && this.config.console) console.log(...msg);\n  }\n\n  // helper function: measure tensor leak\n  analyze(...msg) {\n    if (!this.analyzeMemoryLeaks) return;\n    const current = tf.engine().state.numTensors;\n    const previous = this.numTensors;\n    this.numTensors = current;\n    const leaked = current - previous;\n    if (leaked !== 0) this.log(...msg, leaked);\n  }\n\n  async load(userConfig) {\n    if (userConfig) this.config = mergeDeep(defaults, userConfig);\n    if (this.config.face.enabled && !this.models.facemesh) {\n      this.log('Load model: Face');\n      this.models.facemesh = await facemesh.load(this.config.face);\n    }\n    if (this.config.body.enabled && !this.models.posenet) {\n      this.log('Load model: Body');\n      this.models.posenet = await posenet.load(this.config.body);\n    }\n    if (this.config.hand.enabled && !this.models.handpose) {\n      this.log('Load model: Hand');\n      this.models.handpose = await handpose.load(this.config.hand);\n    }\n    if (this.config.face.enabled && this.config.face.age.enabled && !this.models.age) {\n      this.log('Load model: Age');\n      this.models.age = await ssrnet.loadAge(this.config);\n    }\n    if (this.config.face.enabled && this.config.face.gender.enabled && !this.models.gender) {\n      this.log('Load model: Gender');\n      this.models.gender = await ssrnet.loadGender(this.config);\n    }\n    if (this.config.face.enabled && this.config.face.emotion.enabled && !this.models.emotion) {\n      this.log('Load model: Emotion');\n      this.models.emotion = await emotion.load(this.config);\n    }\n  }\n\n  tfImage(input) {\n    // let imageData;\n    let filtered;\n    if (this.fx && this.config.filter.enabled && !(input instanceof tf.Tensor)) {\n      const originalWidth = input.naturalWidth || input.videoWidth || input.width || (input.shape && (input.shape[1] > 0));\n      const originalHeight = input.naturalHeight || input.videoHeight || input.height || (input.shape && (input.shape[2] > 0));\n\n      let targetWidth = originalWidth;\n      if (this.config.filter.width > 0) targetWidth = this.config.filter.width;\n      else if (this.config.filter.height > 0) targetWidth = originalWidth * (this.config.filter.height / originalHeight);\n      let targetHeight = originalHeight;\n      if (this.config.filter.height > 0) targetHeight = this.config.filter.height;\n      else if (this.config.filter.width > 0) targetHeight = originalHeight * (this.config.filter.width / originalWidth);\n      const offscreenCanvas = (typeof OffscreenCanvas !== 'undefined') ? new OffscreenCanvas(targetWidth, targetHeight) : document.createElement('canvas');\n      offscreenCanvas.width = targetWidth;\n      offscreenCanvas.height = targetHeight;\n      const ctx = offscreenCanvas.getContext('2d');\n      if (input instanceof ImageData) ctx.putImageData(input, 0, 0);\n      else ctx.drawImage(input, 0, 0, originalWidth, originalHeight, 0, 0, offscreenCanvas.width, offscreenCanvas.height);\n      this.fx.reset();\n      this.fx.addFilter('brightness', this.config.filter.brightness); // must have at least one filter enabled\n      if (this.config.filter.contrast !== 0) this.fx.addFilter('contrast', this.config.filter.contrast);\n      if (this.config.filter.sharpness !== 0) this.fx.addFilter('sharpen', this.config.filter.sharpness);\n      if (this.config.filter.blur !== 0) this.fx.addFilter('blur', this.config.filter.blur);\n      if (this.config.filter.saturation !== 0) this.fx.addFilter('saturation', this.config.filter.saturation);\n      if (this.config.filter.hue !== 0) this.fx.addFilter('hue', this.config.filter.hue);\n      if (this.config.filter.negative) this.fx.addFilter('negative');\n      if (this.config.filter.sepia) this.fx.addFilter('sepia');\n      if (this.config.filter.vintage) this.fx.addFilter('brownie');\n      if (this.config.filter.sepia) this.fx.addFilter('sepia');\n      if (this.config.filter.kodachrome) this.fx.addFilter('kodachrome');\n      if (this.config.filter.technicolor) this.fx.addFilter('technicolor');\n      if (this.config.filter.polaroid) this.fx.addFilter('polaroid');\n      if (this.config.filter.pixelate !== 0) this.fx.addFilter('pixelate', this.config.filter.pixelate);\n      filtered = this.fx.apply(offscreenCanvas);\n    }\n    let tensor;\n    if (input instanceof tf.Tensor) {\n      tensor = tf.clone(input);\n    } else {\n      const pixels = tf.browser.fromPixels(filtered || input);\n      const casted = pixels.toFloat();\n      tensor = casted.expandDims(0);\n      pixels.dispose();\n      casted.dispose();\n    }\n    return { tensor, canvas: this.config.filter.return ? filtered : null };\n  }\n\n  async detect(input, userConfig = {}) {\n    this.state = 'config';\n    const perf = {};\n    let timeStamp;\n\n    this.config = mergeDeep(defaults, userConfig);\n    if (!this.config.videoOptimized) this.config = mergeDeep(this.config, override);\n\n    // sanity checks\n    this.state = 'check';\n    const error = sanity(input);\n    if (error) {\n      this.log(error, input);\n      return { error };\n    }\n\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise(async (resolve) => {\n      const timeStart = now();\n\n      // configure backend\n      timeStamp = now();\n      if (tf.getBackend() !== this.config.backend) {\n        this.state = 'backend';\n        this.log('Human library setting backend:', this.config.backend);\n        await tf.setBackend(this.config.backend);\n        await tf.ready();\n      }\n      perf.backend = Math.trunc(now() - timeStamp);\n\n      // check number of loaded models\n      if (first) {\n        this.log('Human library starting');\n        this.log('Configuration:', this.config);\n        this.log('Flags:', tf.ENV.flags);\n        first = false;\n      }\n\n      // load models if enabled\n      timeStamp = now();\n      this.state = 'load';\n      await this.load();\n      perf.load = Math.trunc(now() - timeStamp);\n\n      if (this.config.scoped) tf.engine().startScope();\n\n      this.analyze('Start Detect:');\n\n      timeStamp = now();\n      const image = this.tfImage(input);\n      perf.image = Math.trunc(now() - timeStamp);\n      const imageTensor = image.tensor;\n\n      // run posenet\n      this.state = 'run:body';\n      timeStamp = now();\n      this.analyze('Start PoseNet');\n      const poseRes = this.config.body.enabled ? await this.models.posenet.estimatePoses(imageTensor, this.config.body) : [];\n      this.analyze('End PoseNet:');\n      perf.body = Math.trunc(now() - timeStamp);\n\n      // run handpose\n      this.state = 'run:hand';\n      timeStamp = now();\n      this.analyze('Start HandPose:');\n      const handRes = this.config.hand.enabled ? await this.models.handpose.estimateHands(imageTensor, this.config.hand) : [];\n      this.analyze('End HandPose:');\n      perf.hand = Math.trunc(now() - timeStamp);\n\n      // run facemesh, includes blazeface and iris\n      const faceRes = [];\n      if (this.config.face.enabled) {\n        this.state = 'run:face';\n        timeStamp = now();\n        this.analyze('Start FaceMesh:');\n        const faces = await this.models.facemesh.estimateFaces(imageTensor, this.config.face);\n        perf.face = Math.trunc(now() - timeStamp);\n        for (const face of faces) {\n          // is something went wrong, skip the face\n          if (!face.image || face.image.isDisposedInternal) {\n            this.log('face object is disposed:', face.image);\n            continue;\n          }\n          // run ssr-net age & gender, inherits face from blazeface\n          this.state = 'run:agegender';\n          timeStamp = now();\n          const ssrData = (this.config.face.age.enabled || this.config.face.gender.enabled) ? await ssrnet.predict(face.image, this.config) : {};\n          perf.agegender = Math.trunc(now() - timeStamp);\n          // run emotion, inherits face from blazeface\n          this.state = 'run:emotion';\n          timeStamp = now();\n          const emotionData = this.config.face.emotion.enabled ? await emotion.predict(face.image, this.config) : {};\n          perf.emotion = Math.trunc(now() - timeStamp);\n\n          // dont need face anymore\n          face.image.dispose();\n          // calculate iris distance\n          // iris: array[ bottom, left, top, right, center ]\n          const iris = (face.annotations.leftEyeIris && face.annotations.rightEyeIris)\n            ? Math.max(face.annotations.leftEyeIris[3][0] - face.annotations.leftEyeIris[1][0], face.annotations.rightEyeIris[3][0] - face.annotations.rightEyeIris[1][0])\n            : 0;\n          faceRes.push({\n            confidence: face.confidence,\n            box: face.box,\n            mesh: face.mesh,\n            annotations: face.annotations,\n            age: ssrData.age,\n            gender: ssrData.gender,\n            agConfidence: ssrData.confidence,\n            emotion: emotionData,\n            iris: (iris !== 0) ? Math.trunc(100 * 11.7 /* human iris size in mm */ / iris) / 100 : 0,\n          });\n          this.analyze('End FaceMesh:');\n        }\n      }\n\n      imageTensor.dispose();\n      this.state = 'idle';\n\n      if (this.config.scoped) tf.engine().endScope();\n      this.analyze('End Scope:');\n\n      perf.total = Math.trunc(now() - timeStart);\n      resolve({ face: faceRes, body: poseRes, hand: handRes, performance: perf, canvas: image.canvas });\n    });\n  }\n}\n\nexport { Human as default };\n"],
  "mappings": "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AAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,iBAAiB;AAAA,IAClB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,iBAAiB;AAAA,IAClB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,iBAAiB;AAAA,IAClB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,iBAAiB;AAAA,IAClB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,iBAAiB;AAAA,IAClB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,iBAAiB;AAAA,IAClB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,iBAAiB;AAAA,IAClB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,kBAAkB;AAAA,IACnB,CAAC,gBAAgB;AAAA,IACjB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,kBAAkB;AAAA,IACnB,CAAC,iBAAiB;AAAA,IAClB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA,IACpB,CAAC,mBAAmB;AAAA;AAAA;;;ACpdtB,IAAA;AAAA;AAAA;AAAA;AAAA,8BAAe;AAAA,IACb;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAC1E;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACzE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAC1E;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IACpE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACzE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACtE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACvE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACvE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACrE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IACrE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACvE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAC1E;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACzE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACxE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACzE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACvE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACzE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACvE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IACvE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACzE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACvE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACvE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACzE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACrE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAC1E;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACvE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACzE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAC1E;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACrE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACpE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK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",
  "names": []
}
